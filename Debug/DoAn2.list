
DoAn2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800462c  0800462c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800462c  0800462c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800462c  0800462c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000018  0800464c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800464c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b623  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ebb  00000000  00000000  0002b6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f3  00000000  00000000  0002df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176f1  00000000  00000000  0002e78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de23  00000000  00000000  00045e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085063  00000000  00000000  00053c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002928  00000000  00000000  000d8d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000db62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080044a0 	.word	0x080044a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080044a0 	.word	0x080044a0

0800014c <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800015c:	88fa      	ldrh	r2, [r7, #6]
 800015e:	88bb      	ldrh	r3, [r7, #4]
 8000160:	4413      	add	r3, r2
 8000162:	2b0f      	cmp	r3, #15
 8000164:	dc01      	bgt.n	800016a <bytestowrite+0x1e>
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	e003      	b.n	8000172 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800016a:	88bb      	ldrh	r3, [r7, #4]
 800016c:	f1c3 0310 	rsb	r3, r3, #16
 8000170:	b29b      	uxth	r3, r3
}
 8000172:	4618      	mov	r0, r3
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b08e      	sub	sp, #56	; 0x38
 8000180:	af04      	add	r7, sp, #16
 8000182:	60ba      	str	r2, [r7, #8]
 8000184:	461a      	mov	r2, r3
 8000186:	4603      	mov	r3, r0
 8000188:	81fb      	strh	r3, [r7, #14]
 800018a:	460b      	mov	r3, r1
 800018c:	81bb      	strh	r3, [r7, #12]
 800018e:	4613      	mov	r3, r2
 8000190:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000192:	2304      	movs	r3, #4
 8000194:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000196:	89fb      	ldrh	r3, [r7, #14]
 8000198:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800019a:	88fa      	ldrh	r2, [r7, #6]
 800019c:	89bb      	ldrh	r3, [r7, #12]
 800019e:	4413      	add	r3, r2
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	da00      	bge.n	80001a6 <EEPROM_Write+0x2a>
 80001a4:	330f      	adds	r3, #15
 80001a6:	111b      	asrs	r3, r3, #4
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	89fb      	ldrh	r3, [r7, #14]
 80001ac:	4413      	add	r3, r2
 80001ae:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80001b0:	8b7a      	ldrh	r2, [r7, #26]
 80001b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80001b4:	1ad3      	subs	r3, r2, r3
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	3301      	adds	r3, #1
 80001ba:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80001bc:	2300      	movs	r3, #0
 80001be:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
 80001c4:	e034      	b.n	8000230 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80001c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80001c8:	69fb      	ldr	r3, [r7, #28]
 80001ca:	fa02 f303 	lsl.w	r3, r2, r3
 80001ce:	b21a      	sxth	r2, r3
 80001d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80001d4:	4313      	orrs	r3, r2
 80001d6:	b21b      	sxth	r3, r3
 80001d8:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80001da:	89ba      	ldrh	r2, [r7, #12]
 80001dc:	88fb      	ldrh	r3, [r7, #6]
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f7ff ffb3 	bl	800014c <bytestowrite>
 80001e6:	4603      	mov	r3, r0
 80001e8:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 80001ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80001ec:	68ba      	ldr	r2, [r7, #8]
 80001ee:	4413      	add	r3, r2
 80001f0:	8af9      	ldrh	r1, [r7, #22]
 80001f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f6:	9202      	str	r2, [sp, #8]
 80001f8:	8aba      	ldrh	r2, [r7, #20]
 80001fa:	9201      	str	r2, [sp, #4]
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2302      	movs	r3, #2
 8000200:	460a      	mov	r2, r1
 8000202:	2150      	movs	r1, #80	; 0x50
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <EEPROM_Write+0xc8>)
 8000206:	f001 ffef 	bl	80021e8 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800020a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800020c:	3301      	adds	r3, #1
 800020e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000210:	2300      	movs	r3, #0
 8000212:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000214:	88fa      	ldrh	r2, [r7, #6]
 8000216:	8abb      	ldrh	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 800021c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800021e:	8abb      	ldrh	r3, [r7, #20]
 8000220:	4413      	add	r3, r2
 8000222:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000224:	2005      	movs	r0, #5
 8000226:	f001 f9ed 	bl	8001604 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800022a:	6a3b      	ldr	r3, [r7, #32]
 800022c:	3301      	adds	r3, #1
 800022e:	623b      	str	r3, [r7, #32]
 8000230:	8b3b      	ldrh	r3, [r7, #24]
 8000232:	6a3a      	ldr	r2, [r7, #32]
 8000234:	429a      	cmp	r2, r3
 8000236:	dbc6      	blt.n	80001c6 <EEPROM_Write+0x4a>
	}
}
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	3728      	adds	r7, #40	; 0x28
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000058 	.word	0x20000058

08000248 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08e      	sub	sp, #56	; 0x38
 800024c:	af04      	add	r7, sp, #16
 800024e:	60ba      	str	r2, [r7, #8]
 8000250:	461a      	mov	r2, r3
 8000252:	4603      	mov	r3, r0
 8000254:	81fb      	strh	r3, [r7, #14]
 8000256:	460b      	mov	r3, r1
 8000258:	81bb      	strh	r3, [r7, #12]
 800025a:	4613      	mov	r3, r2
 800025c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800025e:	2304      	movs	r3, #4
 8000260:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000262:	89fb      	ldrh	r3, [r7, #14]
 8000264:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000266:	88fa      	ldrh	r2, [r7, #6]
 8000268:	89bb      	ldrh	r3, [r7, #12]
 800026a:	4413      	add	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	da00      	bge.n	8000272 <EEPROM_Read+0x2a>
 8000270:	330f      	adds	r3, #15
 8000272:	111b      	asrs	r3, r3, #4
 8000274:	b29a      	uxth	r2, r3
 8000276:	89fb      	ldrh	r3, [r7, #14]
 8000278:	4413      	add	r3, r2
 800027a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 800027c:	8b7a      	ldrh	r2, [r7, #26]
 800027e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	b29b      	uxth	r3, r3
 8000284:	3301      	adds	r3, #1
 8000286:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000288:	2300      	movs	r3, #0
 800028a:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
 8000290:	e031      	b.n	80002f6 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000292:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	fa02 f303 	lsl.w	r3, r2, r3
 800029a:	b21a      	sxth	r2, r3
 800029c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80002a6:	89ba      	ldrh	r2, [r7, #12]
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4611      	mov	r1, r2
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4d 	bl	800014c <bytestowrite>
 80002b2:	4603      	mov	r3, r0
 80002b4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	4413      	add	r3, r2
 80002bc:	8af9      	ldrh	r1, [r7, #22]
 80002be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002c2:	9202      	str	r2, [sp, #8]
 80002c4:	8aba      	ldrh	r2, [r7, #20]
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2302      	movs	r3, #2
 80002cc:	460a      	mov	r2, r1
 80002ce:	2150      	movs	r1, #80	; 0x50
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <EEPROM_Read+0xc0>)
 80002d2:	f002 f883 	bl	80023dc <HAL_I2C_Mem_Read>
		startPage += 1;
 80002d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80002d8:	3301      	adds	r3, #1
 80002da:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 80002dc:	2300      	movs	r3, #0
 80002de:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80002e0:	88fa      	ldrh	r2, [r7, #6]
 80002e2:	8abb      	ldrh	r3, [r7, #20]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80002e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80002ea:	8abb      	ldrh	r3, [r7, #20]
 80002ec:	4413      	add	r3, r2
 80002ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 80002f0:	6a3b      	ldr	r3, [r7, #32]
 80002f2:	3301      	adds	r3, #1
 80002f4:	623b      	str	r3, [r7, #32]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	6a3a      	ldr	r2, [r7, #32]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	dbc9      	blt.n	8000292 <EEPROM_Read+0x4a>
	}
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3728      	adds	r7, #40	; 0x28
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000058 	.word	0x20000058

0800030c <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08c      	sub	sp, #48	; 0x30
 8000310:	af04      	add	r7, sp, #16
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000316:	2304      	movs	r3, #4
 8000318:	61fb      	str	r3, [r7, #28]
	uint16_t MemAddress = page<<paddrposition;
 800031a:	88fa      	ldrh	r2, [r7, #6]
 800031c:	69fb      	ldr	r3, [r7, #28]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	837b      	strh	r3, [r7, #26]

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 8000324:	f107 0308 	add.w	r3, r7, #8
 8000328:	2210      	movs	r2, #16
 800032a:	21ff      	movs	r1, #255	; 0xff
 800032c:	4618      	mov	r0, r3
 800032e:	f004 f88b 	bl	8004448 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8000332:	8b7a      	ldrh	r2, [r7, #26]
 8000334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000338:	9302      	str	r3, [sp, #8]
 800033a:	2310      	movs	r3, #16
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2302      	movs	r3, #2
 8000346:	2150      	movs	r1, #80	; 0x50
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <EEPROM_PageErase+0x50>)
 800034a:	f001 ff4d 	bl	80021e8 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 800034e:	2005      	movs	r0, #5
 8000350:	f001 f958 	bl	8001604 <HAL_Delay>
}
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000058 	.word	0x20000058

08000360 <KeyPad_Init>:
								 {'7','8','9'},
								 {'*','0','#'}
							} ;
//#############################################################################################
void KeyPad_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN | KEYPAD_ROW2_PIN | KEYPAD_ROW3_PIN | KEYPAD_ROW4_PIN, GPIO_PIN_SET);
//


    /*Configure GPIO pins : PB0 PB13 PB15 */
      GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8000366:	f24a 0301 	movw	r3, #40961	; 0xa001
 800036a:	603b      	str	r3, [r7, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	2301      	movs	r3, #1
 800036e:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	2302      	movs	r3, #2
 8000376:	60fb      	str	r3, [r7, #12]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	463b      	mov	r3, r7
 800037a:	4619      	mov	r1, r3
 800037c:	4822      	ldr	r0, [pc, #136]	; (8000408 <KeyPad_Init+0xa8>)
 800037e:	f001 fb25 	bl	80019cc <HAL_GPIO_Init>

      /*Configure GPIO pins : PB1 PB10 */
      GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 8000382:	f240 4302 	movw	r3, #1026	; 0x402
 8000386:	603b      	str	r3, [r7, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000388:	4b20      	ldr	r3, [pc, #128]	; (800040c <KeyPad_Init+0xac>)
 800038a:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800038c:	2302      	movs	r3, #2
 800038e:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000390:	463b      	mov	r3, r7
 8000392:	4619      	mov	r1, r3
 8000394:	481c      	ldr	r0, [pc, #112]	; (8000408 <KeyPad_Init+0xa8>)
 8000396:	f001 fb19 	bl	80019cc <HAL_GPIO_Init>

      /*Configure GPIO pins : PB12 PB14 */
      GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800039a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800039e:	603b      	str	r3, [r7, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003a4:	2302      	movs	r3, #2
 80003a6:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <KeyPad_Init+0xa8>)
 80003ae:	f001 fb0d 	bl	80019cc <HAL_GPIO_Init>

      /*Configure GPIO pin : PA8 */
      GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003b6:	603b      	str	r3, [r7, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b8:	2300      	movs	r3, #0
 80003ba:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c0:	463b      	mov	r3, r7
 80003c2:	4619      	mov	r1, r3
 80003c4:	4812      	ldr	r0, [pc, #72]	; (8000410 <KeyPad_Init+0xb0>)
 80003c6:	f001 fb01 	bl	80019cc <HAL_GPIO_Init>

      /*Configure GPIO pins : PA9 PA10 */
      GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80003ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80003ce:	603b      	str	r3, [r7, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d4:	2302      	movs	r3, #2
 80003d6:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	60fb      	str	r3, [r7, #12]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	463b      	mov	r3, r7
 80003de:	4619      	mov	r1, r3
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <KeyPad_Init+0xb0>)
 80003e2:	f001 faf3 	bl	80019cc <HAL_GPIO_Init>


      /*set all row pins to high level*/
      HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN | KEYPAD_ROW2_PIN, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80003ec:	4808      	ldr	r0, [pc, #32]	; (8000410 <KeyPad_Init+0xb0>)
 80003ee:	f001 fc88 	bl	8001d02 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW1_PIN | KEYPAD_ROW4_PIN, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <KeyPad_Init+0xa8>)
 80003fa:	f001 fc82 	bl	8001d02 <HAL_GPIO_WritePin>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010c00 	.word	0x40010c00
 800040c:	10110000 	.word	0x10110000
 8000410:	40010800 	.word	0x40010800

08000414 <KEYPAD_GetChar>:

//#############################################################################################
char KEYPAD_GetChar(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	// Check ROW 1 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW1_PIN, 1) ;
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4872      	ldr	r0, [pc, #456]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000420:	f001 fc6f 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	4870      	ldr	r0, [pc, #448]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 800042c:	f001 fc69 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000436:	486d      	ldr	r0, [pc, #436]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 8000438:	f001 fc63 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW4_PIN, 0) ;
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000442:	4869      	ldr	r0, [pc, #420]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000444:	f001 fc5d 	bl	8001d02 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[0][0] ;
 8000448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044c:	4866      	ldr	r0, [pc, #408]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 800044e:	f001 fc41 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	2b01      	cmp	r3, #1
 8000456:	d102      	bne.n	800045e <KEYPAD_GetChar+0x4a>
 8000458:	4b65      	ldr	r3, [pc, #404]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	e0c1      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[0][1] ;
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	4861      	ldr	r0, [pc, #388]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000464:	f001 fc36 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b01      	cmp	r3, #1
 800046c:	d102      	bne.n	8000474 <KEYPAD_GetChar+0x60>
 800046e:	4b60      	ldr	r3, [pc, #384]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 8000470:	785b      	ldrb	r3, [r3, #1]
 8000472:	e0b6      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
			else if(HAL_GPIO_ReadPin(GPIOA, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[0][2] ;
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	485c      	ldr	r0, [pc, #368]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 800047a:	f001 fc2b 	bl	8001cd4 <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d102      	bne.n	800048a <KEYPAD_GetChar+0x76>
 8000484:	4b5a      	ldr	r3, [pc, #360]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	e0ab      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>

	// Check ROW 2 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW1_PIN, 0) ;
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000490:	4855      	ldr	r0, [pc, #340]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000492:	f001 fc36 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 1) ;
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049c:	4853      	ldr	r0, [pc, #332]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 800049e:	f001 fc30 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4850      	ldr	r0, [pc, #320]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 80004aa:	f001 fc2a 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW4_PIN, 0) ;
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b4:	484c      	ldr	r0, [pc, #304]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 80004b6:	f001 fc24 	bl	8001d02 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[1][0];
 80004ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004be:	484a      	ldr	r0, [pc, #296]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 80004c0:	f001 fc08 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d102      	bne.n	80004d0 <KEYPAD_GetChar+0xbc>
 80004ca:	4b49      	ldr	r3, [pc, #292]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 80004cc:	78db      	ldrb	r3, [r3, #3]
 80004ce:	e088      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[1][1] ;
 80004d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d4:	4844      	ldr	r0, [pc, #272]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 80004d6:	f001 fbfd 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d102      	bne.n	80004e6 <KEYPAD_GetChar+0xd2>
 80004e0:	4b43      	ldr	r3, [pc, #268]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	e07d      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
			else if(HAL_GPIO_ReadPin(GPIOA, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[1][2] ;
 80004e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ea:	4840      	ldr	r0, [pc, #256]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 80004ec:	f001 fbf2 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d102      	bne.n	80004fc <KEYPAD_GetChar+0xe8>
 80004f6:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 80004f8:	795b      	ldrb	r3, [r3, #5]
 80004fa:	e072      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>

	// Check ROW 3 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW1_PIN, 0) ;
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4839      	ldr	r0, [pc, #228]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000504:	f001 fbfd 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050e:	4837      	ldr	r0, [pc, #220]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 8000510:	f001 fbf7 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 1) ;
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4834      	ldr	r0, [pc, #208]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 800051c:	f001 fbf1 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW4_PIN, 0) ;
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000526:	4830      	ldr	r0, [pc, #192]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000528:	f001 fbeb 	bl	8001d02 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[2][0];
 800052c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000530:	482d      	ldr	r0, [pc, #180]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000532:	f001 fbcf 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	d102      	bne.n	8000542 <KEYPAD_GetChar+0x12e>
 800053c:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 800053e:	799b      	ldrb	r3, [r3, #6]
 8000540:	e04f      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[2][1] ;
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4828      	ldr	r0, [pc, #160]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000548:	f001 fbc4 	bl	8001cd4 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d102      	bne.n	8000558 <KEYPAD_GetChar+0x144>
 8000552:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 8000554:	79db      	ldrb	r3, [r3, #7]
 8000556:	e044      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
			else if(HAL_GPIO_ReadPin(GPIOA, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[2][2] ;
 8000558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055c:	4823      	ldr	r0, [pc, #140]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 800055e:	f001 fbb9 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d102      	bne.n	800056e <KEYPAD_GetChar+0x15a>
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 800056a:	7a1b      	ldrb	r3, [r3, #8]
 800056c:	e039      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>

	// Check ROW 4 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW1_PIN, 0) ;
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000574:	481c      	ldr	r0, [pc, #112]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 8000576:	f001 fbc4 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	481a      	ldr	r0, [pc, #104]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 8000582:	f001 fbbe 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 800058e:	f001 fbb8 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KEYPAD_ROW4_PIN, 1) ;
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 800059a:	f001 fbb2 	bl	8001d02 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[3][0];
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	4811      	ldr	r0, [pc, #68]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 80005a4:	f001 fb96 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d102      	bne.n	80005b4 <KEYPAD_GetChar+0x1a0>
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 80005b0:	7a5b      	ldrb	r3, [r3, #9]
 80005b2:	e016      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[3][1] ;
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <KEYPAD_GetChar+0x1d4>)
 80005ba:	f001 fb8b 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d102      	bne.n	80005ca <KEYPAD_GetChar+0x1b6>
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 80005c6:	7a9b      	ldrb	r3, [r3, #10]
 80005c8:	e00b      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
			else if(HAL_GPIO_ReadPin(GPIOA, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[3][2] ;
 80005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <KEYPAD_GetChar+0x1d8>)
 80005d0:	f001 fb80 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d102      	bne.n	80005e0 <KEYPAD_GetChar+0x1cc>
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <KEYPAD_GetChar+0x1dc>)
 80005dc:	7adb      	ldrb	r3, [r3, #11]
 80005de:	e000      	b.n	80005e2 <KEYPAD_GetChar+0x1ce>
//	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW5_PIN, 1) ;
//	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[0][0];
//		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[0][1] ;
//			else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[0][2] ;
//				else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL4_PIN) == 1) return KEYPAD_Val[0][3] ;
	return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	40010800 	.word	0x40010800
 80005f0:	20000000 	.word	0x20000000

080005f4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x3F << 1 // change this according to ur setup (3F  7E  27)

void lcd_send_cmd (char cmd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	f043 030c 	orr.w	r3, r3, #12
 8000612:	b2db      	uxtb	r3, r3
 8000614:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	b2db      	uxtb	r3, r3
 800061e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	f043 030c 	orr.w	r3, r3, #12
 8000626:	b2db      	uxtb	r3, r3
 8000628:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	b2db      	uxtb	r3, r3
 8000632:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000634:	f107 0208 	add.w	r2, r7, #8
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2304      	movs	r3, #4
 800063e:	217e      	movs	r1, #126	; 0x7e
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <lcd_send_cmd+0x5c>)
 8000642:	f001 fcd3 	bl	8001fec <HAL_I2C_Master_Transmit>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000058 	.word	0x20000058

08000654 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f043 030d 	orr.w	r3, r3, #13
 8000672:	b2db      	uxtb	r3, r3
 8000674:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	f043 0309 	orr.w	r3, r3, #9
 800067c:	b2db      	uxtb	r3, r3
 800067e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	f043 030d 	orr.w	r3, r3, #13
 8000686:	b2db      	uxtb	r3, r3
 8000688:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	f043 0309 	orr.w	r3, r3, #9
 8000690:	b2db      	uxtb	r3, r3
 8000692:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000694:	f107 0208 	add.w	r2, r7, #8
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2304      	movs	r3, #4
 800069e:	217e      	movs	r1, #126	; 0x7e
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <lcd_send_data+0x5c>)
 80006a2:	f001 fca3 	bl	8001fec <HAL_I2C_Master_Transmit>
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000058 	.word	0x20000058

080006b4 <lcd_clear>:

void lcd_clear (void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80006ba:	2080      	movs	r0, #128	; 0x80
 80006bc:	f7ff ff9a 	bl	80005f4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	e005      	b.n	80006d2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80006c6:	2020      	movs	r0, #32
 80006c8:	f7ff ffc4 	bl	8000654 <lcd_send_data>
	for (int i=0; i<70; i++)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b45      	cmp	r3, #69	; 0x45
 80006d6:	ddf6      	ble.n	80006c6 <lcd_clear+0x12>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
    switch (row)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <lcd_put_cur+0x18>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d005      	beq.n	8000704 <lcd_put_cur+0x22>
 80006f8:	e009      	b.n	800070e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	603b      	str	r3, [r7, #0]
            break;
 8000702:	e004      	b.n	800070e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800070a:	603b      	str	r3, [r7, #0]
            break;
 800070c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff6e 	bl	80005f4 <lcd_send_cmd>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <lcd_init>:


void lcd_init (void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000724:	2032      	movs	r0, #50	; 0x32
 8000726:	f000 ff6d 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x30);
 800072a:	2030      	movs	r0, #48	; 0x30
 800072c:	f7ff ff62 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000730:	2005      	movs	r0, #5
 8000732:	f000 ff67 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000736:	2030      	movs	r0, #48	; 0x30
 8000738:	f7ff ff5c 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800073c:	2001      	movs	r0, #1
 800073e:	f000 ff61 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000742:	2030      	movs	r0, #48	; 0x30
 8000744:	f7ff ff56 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 ff5b 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800074e:	2020      	movs	r0, #32
 8000750:	f7ff ff50 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(10);
 8000754:	200a      	movs	r0, #10
 8000756:	f000 ff55 	bl	8001604 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f7ff ff4a 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f000 ff4f 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000766:	2008      	movs	r0, #8
 8000768:	f7ff ff44 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 ff49 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff3e 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 ff43 	bl	8001604 <HAL_Delay>
	HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 ff40 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000784:	2006      	movs	r0, #6
 8000786:	f7ff ff35 	bl	80005f4 <lcd_send_cmd>
	HAL_Delay(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 ff3a 	bl	8001604 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000790:	200c      	movs	r0, #12
 8000792:	f7ff ff2f 	bl	80005f4 <lcd_send_cmd>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}

0800079a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80007a2:	e006      	b.n	80007b2 <lcd_send_string+0x18>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff51 	bl	8000654 <lcd_send_data>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f4      	bne.n	80007a4 <lcd_send_string+0xa>
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <check_pass_to_enter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int check_pass_to_enter(uint8_t *password){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint8_t passwword_eeprom[3];
	for(int page = 0; page <= MAX_PASSWORD; page++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e025      	b.n	800081e <check_pass_to_enter+0x5a>
		EEPROM_Read(page, 0, passwword_eeprom, 10);
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	b298      	uxth	r0, r3
 80007d6:	f107 020c 	add.w	r2, r7, #12
 80007da:	230a      	movs	r3, #10
 80007dc:	2100      	movs	r1, #0
 80007de:	f7ff fd33 	bl	8000248 <EEPROM_Read>
		for(int i = 0; i < PASSWORD_SIZE; i++){
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	e012      	b.n	800080e <check_pass_to_enter+0x4a>
			if(password[i] != passwword_eeprom[i]){
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	f107 010c 	add.w	r1, r7, #12
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	440b      	add	r3, r1
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d10b      	bne.n	8000816 <check_pass_to_enter+0x52>
				break;
			}
			if(i == PASSWORD_SIZE - 1){
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b03      	cmp	r3, #3
 8000802:	d101      	bne.n	8000808 <check_pass_to_enter+0x44>
				return 1;
 8000804:	2301      	movs	r3, #1
 8000806:	e00e      	b.n	8000826 <check_pass_to_enter+0x62>
		for(int i = 0; i < PASSWORD_SIZE; i++){
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	3301      	adds	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	2b03      	cmp	r3, #3
 8000812:	dde9      	ble.n	80007e8 <check_pass_to_enter+0x24>
 8000814:	e000      	b.n	8000818 <check_pass_to_enter+0x54>
				break;
 8000816:	bf00      	nop
	for(int page = 0; page <= MAX_PASSWORD; page++){
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2b05      	cmp	r3, #5
 8000822:	ddd6      	ble.n	80007d2 <check_pass_to_enter+0xe>
				break;
			}
		}
	}
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <check_slot_password>:

int check_slot_password(uint8_t *password){
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	uint8_t buffer[PAGE_SIZE - 1];
	int empty_page;
	if(check_pass_to_enter(password) == 1){
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ffc3 	bl	80007c4 <check_pass_to_enter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10e      	bne.n	8000862 <check_slot_password+0x32>
		lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" ALREADY EXIST !!");
 8000844:	f7ff ff36 	bl	80006b4 <lcd_clear>
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff49 	bl	80006e2 <lcd_put_cur>
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <check_slot_password+0xa0>)
 8000852:	f7ff ffa2 	bl	800079a <lcd_send_string>
		HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f000 fed3 	bl	8001604 <HAL_Delay>
		return 2;
 800085e:	2302      	movs	r3, #2
 8000860:	e031      	b.n	80008c6 <check_slot_password+0x96>
	}
	for(int page = 0; page <= MAX_PASSWORD; page++){
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
 8000866:	e02a      	b.n	80008be <check_slot_password+0x8e>
		EEPROM_Read(page, 0, buffer, PAGE_SIZE - 1);
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	b298      	uxth	r0, r3
 800086c:	f107 020c 	add.w	r2, r7, #12
 8000870:	230f      	movs	r3, #15
 8000872:	2100      	movs	r1, #0
 8000874:	f7ff fce8 	bl	8000248 <EEPROM_Read>
		for(int x = 0; x <= PAGE_SIZE - 1; x++){
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	e017      	b.n	80008ae <check_slot_password+0x7e>
			if(buffer[x] != 0xFF){
 800087e:	f107 020c 	add.w	r2, r7, #12
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d114      	bne.n	80008b6 <check_slot_password+0x86>
				break;
			}
			if(x == (PAGE_SIZE - 1)){
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	2b0f      	cmp	r3, #15
 8000890:	d10a      	bne.n	80008a8 <check_slot_password+0x78>
				empty_page = page;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	61fb      	str	r3, [r7, #28]
				EEPROM_Write(empty_page, 0, password, 4);
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	b298      	uxth	r0, r3
 800089a:	2304      	movs	r3, #4
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	2100      	movs	r1, #0
 80008a0:	f7ff fc6c 	bl	800017c <EEPROM_Write>
				return 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e00e      	b.n	80008c6 <check_slot_password+0x96>
		for(int x = 0; x <= PAGE_SIZE - 1; x++){
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	3301      	adds	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	dde4      	ble.n	800087e <check_slot_password+0x4e>
 80008b4:	e000      	b.n	80008b8 <check_slot_password+0x88>
				break;
 80008b6:	bf00      	nop
	for(int page = 0; page <= MAX_PASSWORD; page++){
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	3301      	adds	r3, #1
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	ddd1      	ble.n	8000868 <check_slot_password+0x38>
			}
		}
	}
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080044b8 	.word	0x080044b8

080008d4 <delete_password>:

int delete_password(uint8_t *password){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	uint8_t passwword_eeprom[3];
	for(int page = 0; page <= MAX_PASSWORD; page++){
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e02a      	b.n	8000938 <delete_password+0x64>
		EEPROM_Read(page, 0, passwword_eeprom, 10);
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	b298      	uxth	r0, r3
 80008e6:	f107 020c 	add.w	r2, r7, #12
 80008ea:	230a      	movs	r3, #10
 80008ec:	2100      	movs	r1, #0
 80008ee:	f7ff fcab 	bl	8000248 <EEPROM_Read>
		for(int i = 0; i < PASSWORD_SIZE; i++){
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	e017      	b.n	8000928 <delete_password+0x54>
			if(password[i] != passwword_eeprom[i]){
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	f107 010c 	add.w	r1, r7, #12
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	440b      	add	r3, r1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d110      	bne.n	8000930 <delete_password+0x5c>
				break;
			}
			if(i == PASSWORD_SIZE - 1){
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d106      	bne.n	8000922 <delete_password+0x4e>
				EEPROM_PageErase(page);
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	b29b      	uxth	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fcf7 	bl	800030c <EEPROM_PageErase>
				return 1;
 800091e:	2301      	movs	r3, #1
 8000920:	e01b      	b.n	800095a <delete_password+0x86>
		for(int i = 0; i < PASSWORD_SIZE; i++){
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3301      	adds	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b03      	cmp	r3, #3
 800092c:	dde4      	ble.n	80008f8 <delete_password+0x24>
 800092e:	e000      	b.n	8000932 <delete_password+0x5e>
				break;
 8000930:	bf00      	nop
	for(int page = 0; page <= MAX_PASSWORD; page++){
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b05      	cmp	r3, #5
 800093c:	ddd1      	ble.n	80008e2 <delete_password+0xe>
				break;
			}
		}
	}
	lcd_clear();
 800093e:	f7ff feb9 	bl	80006b4 <lcd_clear>
    lcd_put_cur(0, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fecc 	bl	80006e2 <lcd_put_cur>
    lcd_send_string(" NOT EXIST !!");
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <delete_password+0x90>)
 800094c:	f7ff ff25 	bl	800079a <lcd_send_string>
    HAL_Delay(500);
 8000950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000954:	f000 fe56 	bl	8001604 <HAL_Delay>
	return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	080044cc 	.word	0x080044cc

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fde7 	bl	8001540 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8000972:	f7ff fed5 	bl	8000720 <lcd_init>
  lcd_clear();
 8000976:	f7ff fe9d 	bl	80006b4 <lcd_clear>
  KeyPad_Init();
 800097a:	f7ff fcf1 	bl	8000360 <KeyPad_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 fad1 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 fb6d 	bl	8001060 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000986:	f000 fb13 	bl	8000fb0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800098a:	f000 fb3f 	bl	800100c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  unsigned char press_keypad = KEYPAD_GetChar();
 800098e:	f7ff fd41 	bl	8000414 <KEYPAD_GetChar>
 8000992:	4603      	mov	r3, r0
 8000994:	77fb      	strb	r3, [r7, #31]
	  	  HAL_Delay(300);
 8000996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099a:	f000 fe33 	bl	8001604 <HAL_Delay>
	  	  switch(currentstate){
 800099e:	4bb8      	ldr	r3, [pc, #736]	; (8000c80 <main+0x318>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d8f2      	bhi.n	800098e <main+0x26>
 80009a8:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <main+0x48>)
 80009aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ae:	bf00      	nop
 80009b0:	080009c1 	.word	0x080009c1
 80009b4:	08000eb7 	.word	0x08000eb7
 80009b8:	08000ac9 	.word	0x08000ac9
 80009bc:	08000b1d 	.word	0x08000b1d
	  	  case STATE_IDLE:
	  		  lcd_clear();
 80009c0:	f7ff fe78 	bl	80006b4 <lcd_clear>
	  		  lcd_put_cur(0, 0);
 80009c4:	2100      	movs	r1, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fe8b 	bl	80006e2 <lcd_put_cur>
	  		  lcd_send_string("  PASSWORD");
 80009cc:	48ad      	ldr	r0, [pc, #692]	; (8000c84 <main+0x31c>)
 80009ce:	f7ff fee4 	bl	800079a <lcd_send_string>
	  		  lcd_put_cur(1, 0);
 80009d2:	2100      	movs	r1, #0
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fe84 	bl	80006e2 <lcd_put_cur>
	  		  int i = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	  		  while(1){
	  			  if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 80009de:	4baa      	ldr	r3, [pc, #680]	; (8000c88 <main+0x320>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d06b      	beq.n	8000ac0 <main+0x158>
	  			  if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 80009e8:	4ba8      	ldr	r3, [pc, #672]	; (8000c8c <main+0x324>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d068      	beq.n	8000ac4 <main+0x15c>
	  			  press_keypad = KEYPAD_GetChar();
 80009f2:	f7ff fd0f 	bl	8000414 <KEYPAD_GetChar>
 80009f6:	4603      	mov	r3, r0
 80009f8:	77fb      	strb	r3, [r7, #31]
	  			  if(press_keypad != 0){
 80009fa:	7ffb      	ldrb	r3, [r7, #31]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0ee      	beq.n	80009de <main+0x76>
	  				  lcd_send_data(press_keypad);
 8000a00:	7ffb      	ldrb	r3, [r7, #31]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe26 	bl	8000654 <lcd_send_data>
	  				  HAL_Delay(300);
 8000a08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a0c:	f000 fdfa 	bl	8001604 <HAL_Delay>
	  				  password[i] = press_keypad;
 8000a10:	4a9f      	ldr	r2, [pc, #636]	; (8000c90 <main+0x328>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4413      	add	r3, r2
 8000a16:	7ffa      	ldrb	r2, [r7, #31]
 8000a18:	701a      	strb	r2, [r3, #0]
	  				  i++;
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
	  				  if(i == 4){
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d1db      	bne.n	80009de <main+0x76>
	  					  if(check_pass_to_enter(password) == 1){
 8000a26:	489a      	ldr	r0, [pc, #616]	; (8000c90 <main+0x328>)
 8000a28:	f7ff fecc 	bl	80007c4 <check_pass_to_enter>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d11e      	bne.n	8000a70 <main+0x108>
	  					   currentstate = STATE_OPENDOOR;                           //NẾU �?ÚNG THÌ MỞ CỬA
 8000a32:	4b93      	ldr	r3, [pc, #588]	; (8000c80 <main+0x318>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
	  					   HAL_Delay(100);
 8000a38:	2064      	movs	r0, #100	; 0x64
 8000a3a:	f000 fde3 	bl	8001604 <HAL_Delay>
	  					   lcd_clear();
 8000a3e:	f7ff fe39 	bl	80006b4 <lcd_clear>
	  					   lcd_put_cur(0, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fe4c 	bl	80006e2 <lcd_put_cur>
	  					   lcd_send_string("  SUCCESS !!");
 8000a4a:	4892      	ldr	r0, [pc, #584]	; (8000c94 <main+0x32c>)
 8000a4c:	f7ff fea5 	bl	800079a <lcd_send_string>
	  					   lcd_put_cur(1, 0);
 8000a50:	2100      	movs	r1, #0
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fe45 	bl	80006e2 <lcd_put_cur>
	  					   lcd_send_string("OPEN THE DOOR");
 8000a58:	488f      	ldr	r0, [pc, #572]	; (8000c98 <main+0x330>)
 8000a5a:	f7ff fe9e 	bl	800079a <lcd_send_string>
	  					   HAL_Delay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a62:	f000 fdcf 	bl	8001604 <HAL_Delay>
	  					   number_of_failure = 0;
 8000a66:	4b8d      	ldr	r3, [pc, #564]	; (8000c9c <main+0x334>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
	  					   lcd_clear();
 8000a6c:	f7ff fe22 	bl	80006b4 <lcd_clear>
	  					 }
	  					 if(check_pass_to_enter(password) == 0){
 8000a70:	4887      	ldr	r0, [pc, #540]	; (8000c90 <main+0x328>)
 8000a72:	f7ff fea7 	bl	80007c4 <check_pass_to_enter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1b0      	bne.n	80009de <main+0x76>
	  					   currentstate = STATE_IDLE;                           //NẾU SAI THÌ THÔI
 8000a7c:	4b80      	ldr	r3, [pc, #512]	; (8000c80 <main+0x318>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	  					   HAL_Delay(100);
 8000a82:	2064      	movs	r0, #100	; 0x64
 8000a84:	f000 fdbe 	bl	8001604 <HAL_Delay>
	  					   lcd_clear();
 8000a88:	f7ff fe14 	bl	80006b4 <lcd_clear>
	  					   lcd_put_cur(0, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fe27 	bl	80006e2 <lcd_put_cur>
	  					   lcd_send_string("  FAILED !!");
 8000a94:	4882      	ldr	r0, [pc, #520]	; (8000ca0 <main+0x338>)
 8000a96:	f7ff fe80 	bl	800079a <lcd_send_string>
	  					   HAL_Delay(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9e:	f000 fdb1 	bl	8001604 <HAL_Delay>
	  					   number_of_failure++;
 8000aa2:	4b7e      	ldr	r3, [pc, #504]	; (8000c9c <main+0x334>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4a7c      	ldr	r2, [pc, #496]	; (8000c9c <main+0x334>)
 8000aaa:	6013      	str	r3, [r2, #0]
	  					   if(number_of_failure == 5){
 8000aac:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <main+0x334>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d102      	bne.n	8000aba <main+0x152>
	  						   currentstate = STATE_DISABLE;
 8000ab4:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <main+0x318>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	701a      	strb	r2, [r3, #0]
	  					   }
	  					   lcd_clear();
 8000aba:	f7ff fdfb 	bl	80006b4 <lcd_clear>
	  					   break;
 8000abe:	e002      	b.n	8000ac6 <main+0x15e>
	  			  if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000ac0:	bf00      	nop
 8000ac2:	e212      	b.n	8000eea <main+0x582>
	  			  if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000ac4:	bf00      	nop
	  					 }
	  				  }
	  			  }
	  		  }
	  		  break;
 8000ac6:	e210      	b.n	8000eea <main+0x582>

	  	  case STATE_DISABLE:
	  		  int y = 30;
 8000ac8:	231e      	movs	r3, #30
 8000aca:	617b      	str	r3, [r7, #20]
	  		  for(int x = 0; x <= 30; x++){
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	e01d      	b.n	8000b0e <main+0x1a6>
	  			  y--;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
	  			  lcd_clear();
 8000ad8:	f7ff fdec 	bl	80006b4 <lcd_clear>
	  			  lcd_put_cur(0, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fdff 	bl	80006e2 <lcd_put_cur>
	  			  lcd_send_string("DISABLE");
 8000ae4:	486f      	ldr	r0, [pc, #444]	; (8000ca4 <main+0x33c>)
 8000ae6:	f7ff fe58 	bl	800079a <lcd_send_string>
	  			  lcd_put_cur(1, 0);
 8000aea:	2100      	movs	r1, #0
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fdf8 	bl	80006e2 <lcd_put_cur>
	  			  lcd_send_data(y + '0');
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3330      	adds	r3, #48	; 0x30
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fdaa 	bl	8000654 <lcd_send_data>
	  			  HAL_Delay(300);
 8000b00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b04:	f000 fd7e 	bl	8001604 <HAL_Delay>
	  		  for(int x = 0; x <= 30; x++){
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	2b1e      	cmp	r3, #30
 8000b12:	ddde      	ble.n	8000ad2 <main+0x16a>
	  		  }
	  		  currentstate = STATE_IDLE;
 8000b14:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <main+0x318>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000b1a:	e1e6      	b.n	8000eea <main+0x582>

	  	  case STATE_SETTING:
	  		  HAL_Delay(100);
 8000b1c:	2064      	movs	r0, #100	; 0x64
 8000b1e:	f000 fd71 	bl	8001604 <HAL_Delay>
	  			 interrupt_flag1 = 0;
 8000b22:	4b59      	ldr	r3, [pc, #356]	; (8000c88 <main+0x320>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
	  			 lcd_put_cur(0, 0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fdd9 	bl	80006e2 <lcd_put_cur>
	  			 lcd_send_string("SETTING: 1.PASSWORD");
 8000b30:	485d      	ldr	r0, [pc, #372]	; (8000ca8 <main+0x340>)
 8000b32:	f7ff fe32 	bl	800079a <lcd_send_string>
	  			 lcd_put_cur(1, 0);
 8000b36:	2100      	movs	r1, #0
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fdd2 	bl	80006e2 <lcd_put_cur>
	  			 lcd_send_string("         2.FINGERPRINT");
 8000b3e:	485b      	ldr	r0, [pc, #364]	; (8000cac <main+0x344>)
 8000b40:	f7ff fe2b 	bl	800079a <lcd_send_string>
	  			 if(press_keypad == '1'){
 8000b44:	7ffb      	ldrb	r3, [r7, #31]
 8000b46:	2b31      	cmp	r3, #49	; 0x31
 8000b48:	f040 8154 	bne.w	8000df4 <main+0x48c>
	  				 HAL_Delay(200);  lcd_clear(); setting_password = SETTING_PASSWORD;
 8000b4c:	20c8      	movs	r0, #200	; 0xc8
 8000b4e:	f000 fd59 	bl	8001604 <HAL_Delay>
 8000b52:	f7ff fdaf 	bl	80006b4 <lcd_clear>
 8000b56:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <main+0x348>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	  				 while(1){
	  					 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <main+0x320>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	f000 8143 	beq.w	8000dee <main+0x486>
	  					 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000b68:	4b48      	ldr	r3, [pc, #288]	; (8000c8c <main+0x324>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	f000 813f 	beq.w	8000df2 <main+0x48a>
	  					 switch(setting_password){
 8000b74:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <main+0x348>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	f000 80cd 	beq.w	8000d1a <main+0x3b2>
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	dceb      	bgt.n	8000b5c <main+0x1f4>
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <main+0x226>
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d030      	beq.n	8000bee <main+0x286>
 8000b8c:	e7e6      	b.n	8000b5c <main+0x1f4>
	  					 case SETTING_PASSWORD:
	  						 HAL_Delay(500);
 8000b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b92:	f000 fd37 	bl	8001604 <HAL_Delay>
	  						 lcd_put_cur(0, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fda2 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("1. ADD PASS" );
 8000b9e:	4845      	ldr	r0, [pc, #276]	; (8000cb4 <main+0x34c>)
 8000ba0:	f7ff fdfb 	bl	800079a <lcd_send_string>
	  						 lcd_put_cur(1, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fd9b 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("2. DELETE PASS");
 8000bac:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <main+0x350>)
 8000bae:	f7ff fdf4 	bl	800079a <lcd_send_string>
	  						 press_keypad = KEYPAD_GetChar();
 8000bb2:	f7ff fc2f 	bl	8000414 <KEYPAD_GetChar>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	77fb      	strb	r3, [r7, #31]
	  						 if(press_keypad == '1'){HAL_Delay(500);  lcd_clear(); setting_password = ADD_PASSWORD;}
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	2b31      	cmp	r3, #49	; 0x31
 8000bbe:	d108      	bne.n	8000bd2 <main+0x26a>
 8000bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc4:	f000 fd1e 	bl	8001604 <HAL_Delay>
 8000bc8:	f7ff fd74 	bl	80006b4 <lcd_clear>
 8000bcc:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <main+0x348>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	701a      	strb	r2, [r3, #0]
	  						 if(press_keypad == '2'){HAL_Delay(500);  lcd_clear(); setting_password = DELETE_PASSWORD;}
 8000bd2:	7ffb      	ldrb	r3, [r7, #31]
 8000bd4:	2b32      	cmp	r3, #50	; 0x32
 8000bd6:	f040 8108 	bne.w	8000dea <main+0x482>
 8000bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bde:	f000 fd11 	bl	8001604 <HAL_Delay>
 8000be2:	f7ff fd67 	bl	80006b4 <lcd_clear>
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <main+0x348>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	701a      	strb	r2, [r3, #0]
	  						 break;
 8000bec:	e0fd      	b.n	8000dea <main+0x482>

	  					 case ADD_PASSWORD:
	  						 try_again1:
	  						 lcd_clear();
 8000bee:	f7ff fd61 	bl	80006b4 <lcd_clear>
	  						 lcd_put_cur(0, 0);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fd74 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("NEW PASSWORD");
 8000bfa:	4830      	ldr	r0, [pc, #192]	; (8000cbc <main+0x354>)
 8000bfc:	f7ff fdcd 	bl	800079a <lcd_send_string>
	  						 lcd_put_cur(1, 0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fd6d 	bl	80006e2 <lcd_put_cur>
	  						 int t = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
	  						 while(1){
	  							 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <main+0x320>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d07d      	beq.n	8000d12 <main+0x3aa>
	  							 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <main+0x324>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d07a      	beq.n	8000d16 <main+0x3ae>
	  							 press_keypad = KEYPAD_GetChar();
 8000c20:	f7ff fbf8 	bl	8000414 <KEYPAD_GetChar>
 8000c24:	4603      	mov	r3, r0
 8000c26:	77fb      	strb	r3, [r7, #31]
	  							 HAL_Delay(500);
 8000c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2c:	f000 fcea 	bl	8001604 <HAL_Delay>
	  							 if(press_keypad != 0){
 8000c30:	7ffb      	ldrb	r3, [r7, #31]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0ea      	beq.n	8000c0c <main+0x2a4>
	  								 lcd_send_data(press_keypad);
 8000c36:	7ffb      	ldrb	r3, [r7, #31]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fd0b 	bl	8000654 <lcd_send_data>
	  								 new_password[t] = press_keypad;
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <main+0x358>)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	7ffa      	ldrb	r2, [r7, #31]
 8000c46:	701a      	strb	r2, [r3, #0]
	  								 t++;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
	  								 press_keypad = KEYPAD_GetChar();
 8000c4e:	f7ff fbe1 	bl	8000414 <KEYPAD_GetChar>
 8000c52:	4603      	mov	r3, r0
 8000c54:	77fb      	strb	r3, [r7, #31]
	  								 if(press_keypad == '#'){
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	2b23      	cmp	r3, #35	; 0x23
 8000c5a:	d1d7      	bne.n	8000c0c <main+0x2a4>
	  									 if(t <= 4){
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	dc32      	bgt.n	8000cc8 <main+0x360>
	  										 lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" TRY AGAIN !!");
 8000c62:	f7ff fd27 	bl	80006b4 <lcd_clear>
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fd3a 	bl	80006e2 <lcd_put_cur>
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <main+0x35c>)
 8000c70:	f7ff fd93 	bl	800079a <lcd_send_string>
	  										 HAL_Delay(500);
 8000c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c78:	f000 fcc4 	bl	8001604 <HAL_Delay>
	  										 goto try_again1;
 8000c7c:	e7b7      	b.n	8000bee <main+0x286>
 8000c7e:	bf00      	nop
 8000c80:	20000034 	.word	0x20000034
 8000c84:	080044dc 	.word	0x080044dc
 8000c88:	20000037 	.word	0x20000037
 8000c8c:	20000038 	.word	0x20000038
 8000c90:	20000040 	.word	0x20000040
 8000c94:	080044e8 	.word	0x080044e8
 8000c98:	080044f8 	.word	0x080044f8
 8000c9c:	2000003c 	.word	0x2000003c
 8000ca0:	08004508 	.word	0x08004508
 8000ca4:	08004514 	.word	0x08004514
 8000ca8:	0800451c 	.word	0x0800451c
 8000cac:	08004530 	.word	0x08004530
 8000cb0:	20000035 	.word	0x20000035
 8000cb4:	08004548 	.word	0x08004548
 8000cb8:	08004554 	.word	0x08004554
 8000cbc:	08004564 	.word	0x08004564
 8000cc0:	20000044 	.word	0x20000044
 8000cc4:	08004574 	.word	0x08004574
	  									 }
	  									 if(t == 5){
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d19e      	bne.n	8000c0c <main+0x2a4>
	  										 if(check_slot_password(new_password) == 1){
 8000cce:	4887      	ldr	r0, [pc, #540]	; (8000eec <main+0x584>)
 8000cd0:	f7ff fdae 	bl	8000830 <check_slot_password>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d10d      	bne.n	8000cf6 <main+0x38e>
	  											 lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" SUCCESS !!");
 8000cda:	f7ff fceb 	bl	80006b4 <lcd_clear>
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fcfe 	bl	80006e2 <lcd_put_cur>
 8000ce6:	4882      	ldr	r0, [pc, #520]	; (8000ef0 <main+0x588>)
 8000ce8:	f7ff fd57 	bl	800079a <lcd_send_string>
	  											 HAL_Delay(500);
 8000cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf0:	f000 fc88 	bl	8001604 <HAL_Delay>
	  											 break;
 8000cf4:	e010      	b.n	8000d18 <main+0x3b0>
	  										 }
	  										 else {
	  											 lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" UNSUCCESS !!");
 8000cf6:	f7ff fcdd 	bl	80006b4 <lcd_clear>
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fcf0 	bl	80006e2 <lcd_put_cur>
 8000d02:	487c      	ldr	r0, [pc, #496]	; (8000ef4 <main+0x58c>)
 8000d04:	f7ff fd49 	bl	800079a <lcd_send_string>
	  											 HAL_Delay(500);
 8000d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0c:	f000 fc7a 	bl	8001604 <HAL_Delay>
	  											 break;
 8000d10:	e002      	b.n	8000d18 <main+0x3b0>
	  							 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000d12:	bf00      	nop
 8000d14:	e06a      	b.n	8000dec <main+0x484>
	  							 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000d16:	bf00      	nop
	  								 }

	  							 }
	  						 }

	  						 break;
 8000d18:	e068      	b.n	8000dec <main+0x484>

	  					 case DELETE_PASSWORD:
	  						 try_again2:
	  						 lcd_clear();
 8000d1a:	f7ff fccb 	bl	80006b4 <lcd_clear>
	  						 lcd_put_cur(0, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fcde 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("OLD PASSWORD");
 8000d26:	4874      	ldr	r0, [pc, #464]	; (8000ef8 <main+0x590>)
 8000d28:	f7ff fd37 	bl	800079a <lcd_send_string>
	  						 lcd_put_cur(1, 0);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fcd7 	bl	80006e2 <lcd_put_cur>
	  						 int e = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
	  						 while(1){
	  							 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000d38:	4b70      	ldr	r3, [pc, #448]	; (8000efc <main+0x594>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d04f      	beq.n	8000de2 <main+0x47a>
	  							 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <main+0x598>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d04c      	beq.n	8000de6 <main+0x47e>
	  							 if(press_keypad != 0){
 8000d4c:	7ffb      	ldrb	r3, [r7, #31]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f2      	beq.n	8000d38 <main+0x3d0>
	  								 lcd_send_data(press_keypad);
 8000d52:	7ffb      	ldrb	r3, [r7, #31]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fc7d 	bl	8000654 <lcd_send_data>
	  								 old_password[e] = press_keypad;
 8000d5a:	4a6a      	ldr	r2, [pc, #424]	; (8000f04 <main+0x59c>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4413      	add	r3, r2
 8000d60:	7ffa      	ldrb	r2, [r7, #31]
 8000d62:	701a      	strb	r2, [r3, #0]
	  								 e++;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
	  								 if((press_keypad == '#') && (e<4)){
 8000d6a:	7ffb      	ldrb	r3, [r7, #31]
 8000d6c:	2b23      	cmp	r3, #35	; 0x23
 8000d6e:	d110      	bne.n	8000d92 <main+0x42a>
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	dc0d      	bgt.n	8000d92 <main+0x42a>
	  									 lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" TRY AGAIN !!");
 8000d76:	f7ff fc9d 	bl	80006b4 <lcd_clear>
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fcb0 	bl	80006e2 <lcd_put_cur>
 8000d82:	4861      	ldr	r0, [pc, #388]	; (8000f08 <main+0x5a0>)
 8000d84:	f7ff fd09 	bl	800079a <lcd_send_string>
	  									 HAL_Delay(500);
 8000d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d8c:	f000 fc3a 	bl	8001604 <HAL_Delay>
	  									 goto try_again2;
 8000d90:	e7c3      	b.n	8000d1a <main+0x3b2>
	  								 }
	  								 if((press_keypad == '#') && (e == 4)){
 8000d92:	7ffb      	ldrb	r3, [r7, #31]
 8000d94:	2b23      	cmp	r3, #35	; 0x23
 8000d96:	d1cf      	bne.n	8000d38 <main+0x3d0>
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d1cc      	bne.n	8000d38 <main+0x3d0>
	  									 if(delete_password(old_password) == 1){
 8000d9e:	4859      	ldr	r0, [pc, #356]	; (8000f04 <main+0x59c>)
 8000da0:	f7ff fd98 	bl	80008d4 <delete_password>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d10d      	bne.n	8000dc6 <main+0x45e>
	  										 lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" SUCCESS !!");
 8000daa:	f7ff fc83 	bl	80006b4 <lcd_clear>
 8000dae:	2100      	movs	r1, #0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fc96 	bl	80006e2 <lcd_put_cur>
 8000db6:	484e      	ldr	r0, [pc, #312]	; (8000ef0 <main+0x588>)
 8000db8:	f7ff fcef 	bl	800079a <lcd_send_string>
	  										 HAL_Delay(500);
 8000dbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc0:	f000 fc20 	bl	8001604 <HAL_Delay>
	  										 break;
 8000dc4:	e010      	b.n	8000de8 <main+0x480>
	  									 }
	  									 else{
	  										 lcd_clear(); lcd_put_cur(0, 0); lcd_send_string(" UNSUCCESS !!");
 8000dc6:	f7ff fc75 	bl	80006b4 <lcd_clear>
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fc88 	bl	80006e2 <lcd_put_cur>
 8000dd2:	4848      	ldr	r0, [pc, #288]	; (8000ef4 <main+0x58c>)
 8000dd4:	f7ff fce1 	bl	800079a <lcd_send_string>
	  										 HAL_Delay(500);
 8000dd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ddc:	f000 fc12 	bl	8001604 <HAL_Delay>
	  										 break;
 8000de0:	e002      	b.n	8000de8 <main+0x480>
	  							 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000de2:	bf00      	nop
 8000de4:	e002      	b.n	8000dec <main+0x484>
	  							 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000de6:	bf00      	nop
	  									 }
	  								 }
	  							 }
	  						 }
	  						 break;
 8000de8:	e000      	b.n	8000dec <main+0x484>
	  						 break;
 8000dea:	bf00      	nop
	  					 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000dec:	e6b6      	b.n	8000b5c <main+0x1f4>
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <main+0x48c>
	  					 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000df2:	bf00      	nop
	  					 }
	  				 }

	  			 }
	  			 if(press_keypad == '2'){
 8000df4:	7ffb      	ldrb	r3, [r7, #31]
 8000df6:	2b32      	cmp	r3, #50	; 0x32
 8000df8:	d175      	bne.n	8000ee6 <main+0x57e>
	  				 HAL_Delay(200);  lcd_clear(); setting_fingerprint = SETTING_FINGERPRINT;
 8000dfa:	20c8      	movs	r0, #200	; 0xc8
 8000dfc:	f000 fc02 	bl	8001604 <HAL_Delay>
 8000e00:	f7ff fc58 	bl	80006b4 <lcd_clear>
 8000e04:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <main+0x5a4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
	  				 while(1){
	  					 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000e0a:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <main+0x594>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d04c      	beq.n	8000eae <main+0x546>
	  					 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <main+0x598>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d049      	beq.n	8000eb2 <main+0x54a>
	  					 switch(setting_fingerprint){
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <main+0x5a4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d03e      	beq.n	8000ea6 <main+0x53e>
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	dcee      	bgt.n	8000e0a <main+0x4a2>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <main+0x4ce>
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d028      	beq.n	8000e86 <main+0x51e>
 8000e34:	e7e9      	b.n	8000e0a <main+0x4a2>
	  					 case SETTING_FINGERPRINT:
	  						 HAL_Delay(100);
 8000e36:	2064      	movs	r0, #100	; 0x64
 8000e38:	f000 fbe4 	bl	8001604 <HAL_Delay>
	  						 lcd_put_cur(0, 0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fc4f 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("1. ADD FINGERPRINT" );
 8000e44:	4832      	ldr	r0, [pc, #200]	; (8000f10 <main+0x5a8>)
 8000e46:	f7ff fca8 	bl	800079a <lcd_send_string>
	  						 lcd_put_cur(1, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fc48 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("2. DELETE FINGERPRINT");
 8000e52:	4830      	ldr	r0, [pc, #192]	; (8000f14 <main+0x5ac>)
 8000e54:	f7ff fca1 	bl	800079a <lcd_send_string>
	  						 if(press_keypad == '1'){HAL_Delay(200);  lcd_clear(); setting_fingerprint = ADD_FINGERPRINT;}
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	2b31      	cmp	r3, #49	; 0x31
 8000e5c:	d107      	bne.n	8000e6e <main+0x506>
 8000e5e:	20c8      	movs	r0, #200	; 0xc8
 8000e60:	f000 fbd0 	bl	8001604 <HAL_Delay>
 8000e64:	f7ff fc26 	bl	80006b4 <lcd_clear>
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <main+0x5a4>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	701a      	strb	r2, [r3, #0]
	  						 if(press_keypad == '2'){HAL_Delay(200);  lcd_clear(); setting_fingerprint = DELETE_FINGERPRINT;}
 8000e6e:	7ffb      	ldrb	r3, [r7, #31]
 8000e70:	2b32      	cmp	r3, #50	; 0x32
 8000e72:	d11a      	bne.n	8000eaa <main+0x542>
 8000e74:	20c8      	movs	r0, #200	; 0xc8
 8000e76:	f000 fbc5 	bl	8001604 <HAL_Delay>
 8000e7a:	f7ff fc1b 	bl	80006b4 <lcd_clear>
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <main+0x5a4>)
 8000e80:	2205      	movs	r2, #5
 8000e82:	701a      	strb	r2, [r3, #0]
	  						 break;
 8000e84:	e011      	b.n	8000eaa <main+0x542>

	  					 case ADD_FINGERPRINT:
	  						 lcd_clear();
 8000e86:	f7ff fc15 	bl	80006b4 <lcd_clear>
	  						 lcd_put_cur(0, 0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fc28 	bl	80006e2 <lcd_put_cur>
	  						 lcd_send_string("NEW FINGERPRINT" );
 8000e92:	4821      	ldr	r0, [pc, #132]	; (8000f18 <main+0x5b0>)
 8000e94:	f7ff fc81 	bl	800079a <lcd_send_string>
	  						 lcd_put_cur(1, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff fc21 	bl	80006e2 <lcd_put_cur>
	  						 int m = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
	  						 while(1){
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x53c>

	  						 }
	  						 break;

	  					 case DELETE_FINGERPRINT:
	  						 break;
 8000ea6:	bf00      	nop
 8000ea8:	e7af      	b.n	8000e0a <main+0x4a2>
	  						 break;
 8000eaa:	bf00      	nop
	  					 if(interrupt_flag1 == 1) break;												//�?ỌC CỜ NGẮT
 8000eac:	e7ad      	b.n	8000e0a <main+0x4a2>
 8000eae:	bf00      	nop
 8000eb0:	e019      	b.n	8000ee6 <main+0x57e>
	  					 if(interrupt_flag10 == 1) break;												//�?ỌC CỜ NGẮT
 8000eb2:	bf00      	nop
	  					 }
	  				 }
	  			 }
	  		  break;
 8000eb4:	e017      	b.n	8000ee6 <main+0x57e>

	  	  case STATE_OPENDOOR:
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <main+0x5b4>)
 8000ebc:	f000 ff21 	bl	8001d02 <HAL_GPIO_WritePin>
	  		  HAL_Delay(500);
 8000ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec4:	f000 fb9e 	bl	8001604 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <main+0x5b4>)
 8000ece:	f000 ff18 	bl	8001d02 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	f000 fb96 	bl	8001604 <HAL_Delay>
	  		  currentstate = STATE_IDLE;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <main+0x5b8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	  		  interrupt_flag10 = 0;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <main+0x598>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000ee4:	e001      	b.n	8000eea <main+0x582>
	  		  break;
 8000ee6:	bf00      	nop
 8000ee8:	e551      	b.n	800098e <main+0x26>
  {
 8000eea:	e550      	b.n	800098e <main+0x26>
 8000eec:	20000044 	.word	0x20000044
 8000ef0:	08004584 	.word	0x08004584
 8000ef4:	08004590 	.word	0x08004590
 8000ef8:	080045a0 	.word	0x080045a0
 8000efc:	20000037 	.word	0x20000037
 8000f00:	20000038 	.word	0x20000038
 8000f04:	20000048 	.word	0x20000048
 8000f08:	08004574 	.word	0x08004574
 8000f0c:	20000036 	.word	0x20000036
 8000f10:	080045b0 	.word	0x080045b0
 8000f14:	080045c4 	.word	0x080045c4
 8000f18:	080045dc 	.word	0x080045dc
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	20000034 	.word	0x20000034

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b090      	sub	sp, #64	; 0x40
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	2228      	movs	r2, #40	; 0x28
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fa88 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000f62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 f8d3 	bl	8003118 <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f78:	f000 f9b6 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2302      	movs	r3, #2
 8000f82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fb40 	bl	800361c <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa2:	f000 f9a1 	bl	80012e8 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3740      	adds	r7, #64	; 0x40
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <MX_I2C1_Init+0x54>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_I2C1_Init+0x58>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fee:	f000 feb9 	bl	8001d64 <HAL_I2C_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff8:	f000 f976 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000058 	.word	0x20000058
 8001004:	40005400 	.word	0x40005400
 8001008:	000186a0 	.word	0x000186a0

0800100c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_USART2_UART_Init+0x50>)
 8001014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001044:	f002 fc78 	bl	8003938 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800104e:	f000 f94b 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000ac 	.word	0x200000ac
 800105c:	40004400 	.word	0x40004400

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <MX_GPIO_Init+0x118>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <MX_GPIO_Init+0x118>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <MX_GPIO_Init+0x118>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <MX_GPIO_Init+0x118>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a39      	ldr	r2, [pc, #228]	; (8001178 <MX_GPIO_Init+0x118>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b37      	ldr	r3, [pc, #220]	; (8001178 <MX_GPIO_Init+0x118>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <MX_GPIO_Init+0x118>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a33      	ldr	r2, [pc, #204]	; (8001178 <MX_GPIO_Init+0x118>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <MX_GPIO_Init+0x118>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f24a 0101 	movw	r1, #40961	; 0xa001
 80010c2:	482e      	ldr	r0, [pc, #184]	; (800117c <MX_GPIO_Init+0x11c>)
 80010c4:	f000 fe1d 	bl	8001d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80010ce:	482c      	ldr	r0, [pc, #176]	; (8001180 <MX_GPIO_Init+0x120>)
 80010d0:	f000 fe17 	bl	8001d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 80010d4:	f24a 0301 	movw	r3, #40961	; 0xa001
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	4823      	ldr	r0, [pc, #140]	; (800117c <MX_GPIO_Init+0x11c>)
 80010ee:	f000 fc6d 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 80010f2:	f240 4302 	movw	r3, #1026	; 0x402
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_GPIO_Init+0x124>)
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	481d      	ldr	r0, [pc, #116]	; (800117c <MX_GPIO_Init+0x11c>)
 8001108:	f000 fc60 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800110c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <MX_GPIO_Init+0x11c>)
 8001122:	f000 fc53 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4811      	ldr	r0, [pc, #68]	; (8001180 <MX_GPIO_Init+0x120>)
 800113c:	f000 fc46 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001140:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2302      	movs	r3, #2
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4619      	mov	r1, r3
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <MX_GPIO_Init+0x120>)
 800115a:	f000 fc37 	bl	80019cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2101      	movs	r1, #1
 8001162:	2007      	movs	r0, #7
 8001164:	f000 fb49 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001168:	2007      	movs	r0, #7
 800116a:	f000 fb62 	bl	8001832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40010800 	.word	0x40010800
 8001184:	10110000 	.word	0x10110000

08001188 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d107      	bne.n	80011a8 <HAL_GPIO_EXTI_Callback+0x20>
		currentstate = STATE_SETTING;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800119a:	2203      	movs	r2, #3
 800119c:	701a      	strb	r2, [r3, #0]
		interrupt_flag1 = 1;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x40>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80011a4:	f7ff fa86 	bl	80006b4 <lcd_clear>
	}
	if(GPIO_Pin == GPIO_PIN_10){
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ae:	d105      	bne.n	80011bc <HAL_GPIO_EXTI_Callback+0x34>
		currentstate = STATE_OPENDOOR;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		interrupt_flag10 = 1;
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_GPIO_EXTI_Callback+0x44>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
	}
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000034 	.word	0x20000034
 80011c8:	20000037 	.word	0x20000037
 80011cc:	20000038 	.word	0x20000038

080011d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	uint8_t fingerprint_eeprom[10];
	if(huart -> Instance == huart2.Instance){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_UART_RxCpltCallback+0xf8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d16c      	bne.n	80012be <HAL_UART_RxCpltCallback+0xee>
		HAL_UART_Receive_IT(&huart2, fingerprint, sizeof(fingerprint));
 80011e4:	220a      	movs	r2, #10
 80011e6:	4939      	ldr	r1, [pc, #228]	; (80012cc <HAL_UART_RxCpltCallback+0xfc>)
 80011e8:	4837      	ldr	r0, [pc, #220]	; (80012c8 <HAL_UART_RxCpltCallback+0xf8>)
 80011ea:	f002 fbf5 	bl	80039d8 <HAL_UART_Receive_IT>
		if(currentstate == STATE_IDLE){
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_UART_RxCpltCallback+0x100>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d160      	bne.n	80012ba <HAL_UART_RxCpltCallback+0xea>
			interrupt_uart2 = 0;
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_UART_RxCpltCallback+0x104>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			for(int page = START_PAGE_FINGERPRINT; page <= MAX_FINGERPRINT; page++){
 80011fe:	231e      	movs	r3, #30
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e038      	b.n	8001276 <HAL_UART_RxCpltCallback+0xa6>
				EEPROM_Read(page, 0, fingerprint_eeprom, sizeof(fingerprint_eeprom));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	b298      	uxth	r0, r3
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	230a      	movs	r3, #10
 800120e:	2100      	movs	r1, #0
 8001210:	f7ff f81a 	bl	8000248 <EEPROM_Read>
				for(int f = 0; f <= sizeof(fingerprint); f++){
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	e020      	b.n	800125c <HAL_UART_RxCpltCallback+0x8c>
					if(fingerprint[f] != fingerprint_eeprom[f]){
 800121a:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <HAL_UART_RxCpltCallback+0xfc>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4413      	add	r3, r2
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	f107 010c 	add.w	r1, r7, #12
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d119      	bne.n	8001264 <HAL_UART_RxCpltCallback+0x94>
						break;
					}
					if(f == sizeof(fingerprint)){
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d10f      	bne.n	8001256 <HAL_UART_RxCpltCallback+0x86>
						lcd_clear(); lcd_put_cur(0, 0); lcd_send_string("OPEN DOOR");
 8001236:	f7ff fa3d 	bl	80006b4 <lcd_clear>
 800123a:	2100      	movs	r1, #0
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fa50 	bl	80006e2 <lcd_put_cur>
 8001242:	4825      	ldr	r0, [pc, #148]	; (80012d8 <HAL_UART_RxCpltCallback+0x108>)
 8001244:	f7ff faa9 	bl	800079a <lcd_send_string>
						currentstate = STATE_OPENDOOR;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_UART_RxCpltCallback+0x100>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
						interrupt_uart2 = 1;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_UART_RxCpltCallback+0x104>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
						break;
 8001254:	e007      	b.n	8001266 <HAL_UART_RxCpltCallback+0x96>
				for(int f = 0; f <= sizeof(fingerprint); f++){
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	3301      	adds	r3, #1
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d9db      	bls.n	800121a <HAL_UART_RxCpltCallback+0x4a>
 8001262:	e000      	b.n	8001266 <HAL_UART_RxCpltCallback+0x96>
						break;
 8001264:	bf00      	nop
					}
				}
				if(interrupt_uart2 == 1){
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_UART_RxCpltCallback+0x104>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d006      	beq.n	800127e <HAL_UART_RxCpltCallback+0xae>
			for(int page = START_PAGE_FINGERPRINT; page <= MAX_FINGERPRINT; page++){
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	3301      	adds	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b0a      	cmp	r3, #10
 800127a:	ddc3      	ble.n	8001204 <HAL_UART_RxCpltCallback+0x34>
 800127c:	e000      	b.n	8001280 <HAL_UART_RxCpltCallback+0xb0>
					break;
 800127e:	bf00      	nop
				}
			}
			if(interrupt_uart2 == 0){
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_UART_RxCpltCallback+0x104>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d117      	bne.n	80012ba <HAL_UART_RxCpltCallback+0xea>
				lcd_clear(); lcd_put_cur(0, 0); lcd_send_string("FAILURE");
 800128a:	f7ff fa13 	bl	80006b4 <lcd_clear>
 800128e:	2100      	movs	r1, #0
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fa26 	bl	80006e2 <lcd_put_cur>
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <HAL_UART_RxCpltCallback+0x10c>)
 8001298:	f7ff fa7f 	bl	800079a <lcd_send_string>
				number_of_failure++;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_UART_RxCpltCallback+0x110>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_UART_RxCpltCallback+0x110>)
 80012a4:	6013      	str	r3, [r2, #0]
				if(number_of_failure >= 5){
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_RxCpltCallback+0x110>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	dd05      	ble.n	80012ba <HAL_UART_RxCpltCallback+0xea>
					currentstate = STATE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_UART_RxCpltCallback+0x100>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	701a      	strb	r2, [r3, #0]
					number_of_failure = 0;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_UART_RxCpltCallback+0x110>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
				}
			}

		}
		if(setting_fingerprint == ADD_FINGERPRINT){
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_UART_RxCpltCallback+0x114>)
 80012bc:	781b      	ldrb	r3, [r3, #0]

		}
	}
}
 80012be:	bf00      	nop
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000ac 	.word	0x200000ac
 80012cc:	2000004c 	.word	0x2000004c
 80012d0:	20000034 	.word	0x20000034
 80012d4:	20000039 	.word	0x20000039
 80012d8:	080045ec 	.word	0x080045ec
 80012dc:	080045f8 	.word	0x080045f8
 80012e0:	2000003c 	.word	0x2000003c
 80012e4:	20000036 	.word	0x20000036

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_MspInit+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x5c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_MspInit+0x60>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_MspInit+0x60>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000

08001358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <HAL_I2C_MspInit+0x70>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d123      	bne.n	80013c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_I2C_MspInit+0x74>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_I2C_MspInit+0x74>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_I2C_MspInit+0x74>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001390:	23c0      	movs	r3, #192	; 0xc0
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001394:	2312      	movs	r3, #18
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <HAL_I2C_MspInit+0x78>)
 80013a4:	f000 fb12 	bl	80019cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_I2C_MspInit+0x74>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_I2C_MspInit+0x74>)
 80013ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b2:	61d3      	str	r3, [r2, #28]
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_I2C_MspInit+0x74>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_UART_MspInit+0x98>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d137      	bne.n	8001464 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_UART_MspInit+0x9c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_UART_MspInit+0x9c>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_UART_MspInit+0x9c>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_UART_MspInit+0x9c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_UART_MspInit+0x9c>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_UART_MspInit+0x9c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001424:	2304      	movs	r3, #4
 8001426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <HAL_UART_MspInit+0xa0>)
 8001438:	f000 fac8 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800143c:	2308      	movs	r3, #8
 800143e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_UART_MspInit+0xa0>)
 8001450:	f000 fabc 	bl	80019cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	2026      	movs	r0, #38	; 0x26
 800145a:	f000 f9ce 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800145e:	2026      	movs	r0, #38	; 0x26
 8001460:	f000 f9e7 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40004400 	.word	0x40004400
 8001470:	40021000 	.word	0x40021000
 8001474:	40010800 	.word	0x40010800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f885 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80014ca:	2002      	movs	r0, #2
 80014cc:	f000 fc32 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <USART2_IRQHandler+0x10>)
 80014da:	f002 faa3 	bl	8003a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000ac 	.word	0x200000ac

080014e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f4:	f7ff fff8 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014fa:	490c      	ldr	r1, [pc, #48]	; (800152c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001510:	4c09      	ldr	r4, [pc, #36]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f002 ff9b 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001522:	f7ff fa21 	bl	8000968 <main>
  bx lr
 8001526:	4770      	bx	lr
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001530:	08004634 	.word	0x08004634
  ldr r2, =_sbss
 8001534:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001538:	200000f8 	.word	0x200000f8

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x28>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x28>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f947 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff feca 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f95f 	bl	800184e <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f927 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000014 	.word	0x20000014
 80015c8:	20000010 	.word	0x20000010

080015cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_IncTick+0x1c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x20>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_IncTick+0x20>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000014 	.word	0x20000014
 80015ec:	200000f4 	.word	0x200000f4

080015f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <HAL_GetTick+0x10>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	200000f4 	.word	0x200000f4

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff fff0 	bl	80015f0 <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffe0 	bl	80015f0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000014 	.word	0x20000014

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff2d 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff42 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff35 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d008      	beq.n	8001890 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2204      	movs	r2, #4
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e020      	b.n	80018d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020e 	bic.w	r2, r2, #14
 800189e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d005      	beq.n	8001900 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	e051      	b.n	80019a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020e 	bic.w	r2, r2, #14
 800190e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <HAL_DMA_Abort_IT+0xd4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d029      	beq.n	800197e <HAL_DMA_Abort_IT+0xa2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <HAL_DMA_Abort_IT+0xd8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d022      	beq.n	800197a <HAL_DMA_Abort_IT+0x9e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_DMA_Abort_IT+0xdc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01a      	beq.n	8001974 <HAL_DMA_Abort_IT+0x98>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <HAL_DMA_Abort_IT+0xe0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d012      	beq.n	800196e <HAL_DMA_Abort_IT+0x92>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <HAL_DMA_Abort_IT+0xe4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00a      	beq.n	8001968 <HAL_DMA_Abort_IT+0x8c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_DMA_Abort_IT+0xe8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d102      	bne.n	8001962 <HAL_DMA_Abort_IT+0x86>
 800195c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001960:	e00e      	b.n	8001980 <HAL_DMA_Abort_IT+0xa4>
 8001962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001966:	e00b      	b.n	8001980 <HAL_DMA_Abort_IT+0xa4>
 8001968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800196c:	e008      	b.n	8001980 <HAL_DMA_Abort_IT+0xa4>
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	e005      	b.n	8001980 <HAL_DMA_Abort_IT+0xa4>
 8001974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001978:	e002      	b.n	8001980 <HAL_DMA_Abort_IT+0xa4>
 800197a:	2310      	movs	r3, #16
 800197c:	e000      	b.n	8001980 <HAL_DMA_Abort_IT+0xa4>
 800197e:	2301      	movs	r3, #1
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_DMA_Abort_IT+0xec>)
 8001982:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
    } 
  }
  return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020008 	.word	0x40020008
 80019b4:	4002001c 	.word	0x4002001c
 80019b8:	40020030 	.word	0x40020030
 80019bc:	40020044 	.word	0x40020044
 80019c0:	40020058 	.word	0x40020058
 80019c4:	4002006c 	.word	0x4002006c
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e169      	b.n	8001cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e0:	2201      	movs	r2, #1
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8158 	bne.w	8001cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a9a      	ldr	r2, [pc, #616]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d05e      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a08:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d875      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a0e:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d058      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a14:	4a96      	ldr	r2, [pc, #600]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d86f      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a1a:	4a96      	ldr	r2, [pc, #600]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d052      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a20:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d869      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a26:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04c      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a2c:	4a92      	ldr	r2, [pc, #584]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d863      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a32:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d046      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a90      	ldr	r2, [pc, #576]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d85d      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d82a      	bhi.n	8001a98 <HAL_GPIO_Init+0xcc>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d859      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_GPIO_Init+0x80>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001ac7 	.word	0x08001ac7
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001ab3 	.word	0x08001ab3
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001afb 	.word	0x08001afb
 8001a60:	08001afb 	.word	0x08001afb
 8001a64:	08001afb 	.word	0x08001afb
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001afb 	.word	0x08001afb
 8001a70:	08001afb 	.word	0x08001afb
 8001a74:	08001afb 	.word	0x08001afb
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001afb 	.word	0x08001afb
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001afb 	.word	0x08001afb
 8001a88:	08001afb 	.word	0x08001afb
 8001a8c:	08001afb 	.word	0x08001afb
 8001a90:	08001aa9 	.word	0x08001aa9
 8001a94:	08001abd 	.word	0x08001abd
 8001a98:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_GPIO_Init+0x2b4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9e:	e02c      	b.n	8001afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e029      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	3304      	adds	r3, #4
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e024      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e01f      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e01a      	b.n	8001afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e013      	b.n	8001afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	611a      	str	r2, [r3, #16]
          break;
 8001ae6:	e009      	b.n	8001afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	615a      	str	r2, [r3, #20]
          break;
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x130>
          break;
 8001afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d801      	bhi.n	8001b06 <HAL_GPIO_Init+0x13a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_Init+0x13e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d802      	bhi.n	8001b18 <HAL_GPIO_Init+0x14c>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x152>
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3b08      	subs	r3, #8
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	210f      	movs	r1, #15
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b1 	beq.w	8001cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_GPIO_Init+0x2c0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3f      	ldr	r2, [pc, #252]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bca:	492f      	ldr	r1, [pc, #188]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	492c      	ldr	r1, [pc, #176]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4928      	ldr	r1, [pc, #160]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	491e      	ldr	r1, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4914      	ldr	r1, [pc, #80]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d021      	beq.n	8001ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e021      	b.n	8001cae <HAL_GPIO_Init+0x2e2>
 8001c6a:	bf00      	nop
 8001c6c:	10320000 	.word	0x10320000
 8001c70:	10310000 	.word	0x10310000
 8001c74:	10220000 	.word	0x10220000
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10120000 	.word	0x10120000
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40010c00 	.word	0x40010c00
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40011400 	.word	0x40011400
 8001c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f47f ae8e 	bne.w	80019e0 <HAL_GPIO_Init+0x14>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d1e:	e003      	b.n	8001d28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa18 	bl	8001188 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e12b      	b.n	8001fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fae4 	bl	8001358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	; 0x24
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc8:	f001 fd70 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8001dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a81      	ldr	r2, [pc, #516]	; (8001fd8 <HAL_I2C_Init+0x274>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d807      	bhi.n	8001de8 <HAL_I2C_Init+0x84>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a80      	ldr	r2, [pc, #512]	; (8001fdc <HAL_I2C_Init+0x278>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	bf94      	ite	ls
 8001de0:	2301      	movls	r3, #1
 8001de2:	2300      	movhi	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e006      	b.n	8001df6 <HAL_I2C_Init+0x92>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a7d      	ldr	r2, [pc, #500]	; (8001fe0 <HAL_I2C_Init+0x27c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0e7      	b.n	8001fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a78      	ldr	r2, [pc, #480]	; (8001fe4 <HAL_I2C_Init+0x280>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a6a      	ldr	r2, [pc, #424]	; (8001fd8 <HAL_I2C_Init+0x274>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d802      	bhi.n	8001e38 <HAL_I2C_Init+0xd4>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3301      	adds	r3, #1
 8001e36:	e009      	b.n	8001e4c <HAL_I2C_Init+0xe8>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_I2C_Init+0x284>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	495c      	ldr	r1, [pc, #368]	; (8001fd8 <HAL_I2C_Init+0x274>)
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	d819      	bhi.n	8001ea0 <HAL_I2C_Init+0x13c>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e59      	subs	r1, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e80:	400b      	ands	r3, r1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <HAL_I2C_Init+0x138>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e59      	subs	r1, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9a:	e051      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e04f      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d111      	bne.n	8001ecc <HAL_I2C_Init+0x168>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e012      	b.n	8001ef2 <HAL_I2C_Init+0x18e>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	0099      	lsls	r1, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x196>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e022      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <HAL_I2C_Init+0x1bc>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e58      	subs	r0, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	440b      	add	r3, r1
 8001f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1e:	e00f      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	6809      	ldr	r1, [r1, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6911      	ldr	r1, [r2, #16]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68d2      	ldr	r2, [r2, #12]
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	000186a0 	.word	0x000186a0
 8001fdc:	001e847f 	.word	0x001e847f
 8001fe0:	003d08ff 	.word	0x003d08ff
 8001fe4:	431bde83 	.word	0x431bde83
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff faf6 	bl	80015f0 <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 80e0 	bne.w	80021d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2319      	movs	r3, #25
 800201a:	2201      	movs	r2, #1
 800201c:	4970      	ldr	r1, [pc, #448]	; (80021e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fe44 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
 800202c:	e0d3      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Transmit+0x50>
 8002038:	2302      	movs	r3, #2
 800203a:	e0cc      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d007      	beq.n	8002062 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2210      	movs	r2, #16
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	893a      	ldrh	r2, [r7, #8]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fbfe 	bl	80028ac <I2C_MasterRequestWrite>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e08d      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020d0:	e066      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 ff02 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d107      	bne.n	80020fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x188>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	6a39      	ldr	r1, [r7, #32]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fef9 	bl	8002f70 <I2C_WaitOnBTFFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	2b04      	cmp	r3, #4
 800218a:	d107      	bne.n	800219c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d194      	bne.n	80020d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	00100002 	.word	0x00100002
 80021e4:	ffff0000 	.word	0xffff0000

080021e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	817b      	strh	r3, [r7, #10]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002202:	f7ff f9f5 	bl	80015f0 <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	f040 80d9 	bne.w	80023c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2319      	movs	r3, #25
 800221c:	2201      	movs	r2, #1
 800221e:	496d      	ldr	r1, [pc, #436]	; (80023d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fd43 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	e0cc      	b.n	80023ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_I2C_Mem_Write+0x56>
 800223a:	2302      	movs	r3, #2
 800223c:	e0c5      	b.n	80023ca <HAL_I2C_Mem_Write+0x1e2>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d007      	beq.n	8002264 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2221      	movs	r2, #33	; 0x21
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <HAL_I2C_Mem_Write+0x1f0>)
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a6:	88f8      	ldrh	r0, [r7, #6]
 80022a8:	893a      	ldrh	r2, [r7, #8]
 80022aa:	8979      	ldrh	r1, [r7, #10]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	4603      	mov	r3, r0
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fb7a 	bl	80029b0 <I2C_RequestMemoryWrite>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d052      	beq.n	8002368 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e081      	b.n	80023ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fe08 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_I2C_Mem_Write+0x180>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d017      	beq.n	8002368 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1aa      	bne.n	80022c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fdfb 	bl	8002f70 <I2C_WaitOnBTFFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e016      	b.n	80023ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
 80023ee:	460b      	mov	r3, r1
 80023f0:	813b      	strh	r3, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fa:	f7ff f8f9 	bl	80015f0 <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	f040 8244 	bne.w	8002896 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	4982      	ldr	r1, [pc, #520]	; (8002620 <HAL_I2C_Mem_Read+0x244>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fc47 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	e237      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Mem_Read+0x5a>
 8002432:	2302      	movs	r3, #2
 8002434:	e230      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d007      	beq.n	800245c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2222      	movs	r2, #34	; 0x22
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a62      	ldr	r2, [pc, #392]	; (8002624 <HAL_I2C_Mem_Read+0x248>)
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249e:	88f8      	ldrh	r0, [r7, #6]
 80024a0:	893a      	ldrh	r2, [r7, #8]
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fb14 	bl	8002adc <I2C_RequestMemoryRead>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1ec      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e1c0      	b.n	8002870 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d11e      	bne.n	8002534 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002506:	b672      	cpsid	i
}
 8002508:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002530:	b662      	cpsie	i
}
 8002532:	e035      	b.n	80025a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	2b02      	cmp	r3, #2
 800253a:	d11e      	bne.n	800257a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002576:	b662      	cpsie	i
}
 8002578:	e012      	b.n	80025a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002588:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80025a0:	e166      	b.n	8002870 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	f200 811f 	bhi.w	80027ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d123      	bne.n	80025fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fd21 	bl	8003000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e167      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025fa:	e139      	b.n	8002870 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b02      	cmp	r3, #2
 8002602:	d152      	bne.n	80026aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	2200      	movs	r2, #0
 800260c:	4906      	ldr	r1, [pc, #24]	; (8002628 <HAL_I2C_Mem_Read+0x24c>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fb4c 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e13c      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
 800261e:	bf00      	nop
 8002620:	00100002 	.word	0x00100002
 8002624:	ffff0000 	.word	0xffff0000
 8002628:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002672:	b662      	cpsie	i
}
 8002674:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a8:	e0e2      	b.n	8002870 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	2200      	movs	r2, #0
 80026b2:	497b      	ldr	r1, [pc, #492]	; (80028a0 <HAL_I2C_Mem_Read+0x4c4>)
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 faf9 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0e9      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026d4:	b672      	cpsid	i
}
 80026d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800270a:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_I2C_Mem_Read+0x4c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	4a65      	ldr	r2, [pc, #404]	; (80028a8 <HAL_I2C_Mem_Read+0x4cc>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0a1a      	lsrs	r2, r3, #8
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00da      	lsls	r2, r3, #3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	3b01      	subs	r3, #1
 8002728:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d118      	bne.n	8002762 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002752:	b662      	cpsie	i
}
 8002754:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e09a      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b04      	cmp	r3, #4
 800276e:	d1d9      	bne.n	8002724 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027b2:	b662      	cpsie	i
}
 80027b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e8:	e042      	b.n	8002870 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fc06 	bl	8003000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e04c      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d118      	bne.n	8002870 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f ae94 	bne.w	80025a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	00010004 	.word	0x00010004
 80028a4:	2000000c 	.word	0x2000000c
 80028a8:	14f8b589 	.word	0x14f8b589

080028ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d006      	beq.n	80028d6 <I2C_MasterRequestWrite+0x2a>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d003      	beq.n	80028d6 <I2C_MasterRequestWrite+0x2a>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028d4:	d108      	bne.n	80028e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e00b      	b.n	8002900 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d107      	bne.n	8002900 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f9cd 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002926:	d103      	bne.n	8002930 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e035      	b.n	80029a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800293c:	d108      	bne.n	8002950 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800294c:	611a      	str	r2, [r3, #16]
 800294e:	e01b      	b.n	8002988 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002950:	897b      	ldrh	r3, [r7, #10]
 8002952:	11db      	asrs	r3, r3, #7
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0306 	and.w	r3, r3, #6
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f063 030f 	orn	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <I2C_MasterRequestWrite+0xfc>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fa16 	bl	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e010      	b.n	80029a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4907      	ldr	r1, [pc, #28]	; (80029ac <I2C_MasterRequestWrite+0x100>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa06 	bl	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00010008 	.word	0x00010008
 80029ac:	00010002 	.word	0x00010002

080029b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	817b      	strh	r3, [r7, #10]
 80029c2:	460b      	mov	r3, r1
 80029c4:	813b      	strh	r3, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f960 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	d103      	bne.n	8002a0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e05f      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	492d      	ldr	r1, [pc, #180]	; (8002ad8 <I2C_RequestMemoryWrite+0x128>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f9bb 	bl	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04c      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa46 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d107      	bne.n	8002a72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e02b      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	e021      	b.n	8002acc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a88:	893b      	ldrh	r3, [r7, #8]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	6a39      	ldr	r1, [r7, #32]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa20 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d107      	bne.n	8002abe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e005      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac2:	893b      	ldrh	r3, [r7, #8]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	00010002 	.word	0x00010002

08002adc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	817b      	strh	r3, [r7, #10]
 8002aee:	460b      	mov	r3, r1
 8002af0:	813b      	strh	r3, [r7, #8]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f8c2 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d103      	bne.n	8002b46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0aa      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	4952      	ldr	r1, [pc, #328]	; (8002ca8 <I2C_RequestMemoryRead+0x1cc>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f91d 	bl	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e097      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f9a8 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e076      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]
 8002bc2:	e021      	b.n	8002c08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f982 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d107      	bne.n	8002bfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e050      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	6a39      	ldr	r1, [r7, #32]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f967 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d107      	bne.n	8002c30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e035      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f82b 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6a:	d103      	bne.n	8002c74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e013      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	6a3a      	ldr	r2, [r7, #32]
 8002c8c:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <I2C_RequestMemoryRead+0x1cc>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f886 	bl	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	00010002 	.word	0x00010002

08002cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbc:	e048      	b.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d044      	beq.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fc93 	bl	80015f0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d139      	bne.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10d      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	e00c      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d116      	bne.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e023      	b.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10d      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	e00c      	b.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d093      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dae:	e071      	b.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d123      	bne.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e067      	b.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d041      	beq.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7fe fbee 	bl	80015f0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d136      	bne.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10c      	bne.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	e00b      	b.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e021      	b.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10c      	bne.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e00b      	b.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f47f af6d 	bne.w	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eec:	e034      	b.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8e3 	bl	80030ba <I2C_IsAcknowledgeFailed>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e034      	b.n	8002f68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d028      	beq.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7fe fb73 	bl	80015f0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11d      	bne.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d016      	beq.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e007      	b.n	8002f68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d1c3      	bne.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f7c:	e034      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f89b 	bl	80030ba <I2C_IsAcknowledgeFailed>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e034      	b.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d028      	beq.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fb2b 	bl	80015f0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11d      	bne.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d016      	beq.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d1c3      	bne.n	8002f7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800300c:	e049      	b.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b10      	cmp	r3, #16
 800301a:	d119      	bne.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0210 	mvn.w	r2, #16
 8003024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e030      	b.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003050:	f7fe face 	bl	80015f0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	d302      	bcc.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d11d      	bne.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d016      	beq.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e007      	b.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d1ae      	bne.n	800300e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d11b      	bne.n	800310a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
	...

08003118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e272      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8087 	beq.w	8003246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003138:	4b92      	ldr	r3, [pc, #584]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b04      	cmp	r3, #4
 8003142:	d00c      	beq.n	800315e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003144:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b08      	cmp	r3, #8
 800314e:	d112      	bne.n	8003176 <HAL_RCC_OscConfig+0x5e>
 8003150:	4b8c      	ldr	r3, [pc, #560]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d10b      	bne.n	8003176 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315e:	4b89      	ldr	r3, [pc, #548]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d06c      	beq.n	8003244 <HAL_RCC_OscConfig+0x12c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d168      	bne.n	8003244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e24c      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x76>
 8003180:	4b80      	ldr	r3, [pc, #512]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a7f      	ldr	r2, [pc, #508]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	e02e      	b.n	80031ec <HAL_RCC_OscConfig+0xd4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x98>
 8003196:	4b7b      	ldr	r3, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a7a      	ldr	r2, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 800319c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b78      	ldr	r3, [pc, #480]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a77      	ldr	r2, [pc, #476]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xd4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0xbc>
 80031ba:	4b72      	ldr	r3, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a71      	ldr	r2, [pc, #452]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xd4>
 80031d4:	4b6b      	ldr	r3, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a67      	ldr	r2, [pc, #412]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe f9fc 	bl	80015f0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe f9f8 	bl	80015f0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e200      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b5d      	ldr	r3, [pc, #372]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xe4>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe f9e8 	bl	80015f0 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fe f9e4 	bl	80015f0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1ec      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x10c>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003252:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800325e:	4b49      	ldr	r3, [pc, #292]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x18c>
 800326a:	4b46      	ldr	r3, [pc, #280]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x176>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c0      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4939      	ldr	r1, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	e03a      	b.n	800331a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe f99d 	bl	80015f0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe f999 	bl	80015f0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1a1      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4927      	ldr	r1, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f97c 	bl	80015f0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fc:	f7fe f978 	bl	80015f0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e180      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03a      	beq.n	800339c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d019      	beq.n	8003362 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fe f95c 	bl	80015f0 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7fe f958 	bl	80015f0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e160      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCC_OscConfig+0x26c>)
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800335a:	2001      	movs	r0, #1
 800335c:	f000 face 	bl	80038fc <RCC_Delay>
 8003360:	e01c      	b.n	800339c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003368:	f7fe f942 	bl	80015f0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336e:	e00f      	b.n	8003390 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003370:	f7fe f93e 	bl	80015f0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d908      	bls.n	8003390 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e146      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	42420000 	.word	0x42420000
 800338c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b92      	ldr	r3, [pc, #584]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e9      	bne.n	8003370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a6 	beq.w	80034f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	4b88      	ldr	r3, [pc, #544]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4a87      	ldr	r2, [pc, #540]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c4:	61d3      	str	r3, [r2, #28]
 80033c6:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b82      	ldr	r3, [pc, #520]	; (80035e0 <HAL_RCC_OscConfig+0x4c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b7f      	ldr	r3, [pc, #508]	; (80035e0 <HAL_RCC_OscConfig+0x4c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7e      	ldr	r2, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x4c8>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fe f8ff 	bl	80015f0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f6:	f7fe f8fb 	bl	80015f0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e103      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCC_OscConfig+0x4c8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x312>
 800341c:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4a6e      	ldr	r2, [pc, #440]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6213      	str	r3, [r2, #32]
 8003428:	e02d      	b.n	8003486 <HAL_RCC_OscConfig+0x36e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x334>
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a69      	ldr	r2, [pc, #420]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4a66      	ldr	r2, [pc, #408]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6213      	str	r3, [r2, #32]
 800344a:	e01c      	b.n	8003486 <HAL_RCC_OscConfig+0x36e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d10c      	bne.n	800346e <HAL_RCC_OscConfig+0x356>
 8003454:	4b61      	ldr	r3, [pc, #388]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a60      	ldr	r2, [pc, #384]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 800345a:	f043 0304 	orr.w	r3, r3, #4
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4a5d      	ldr	r2, [pc, #372]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6213      	str	r3, [r2, #32]
 800346c:	e00b      	b.n	8003486 <HAL_RCC_OscConfig+0x36e>
 800346e:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a5a      	ldr	r2, [pc, #360]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6213      	str	r3, [r2, #32]
 800347a:	4b58      	ldr	r3, [pc, #352]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a57      	ldr	r2, [pc, #348]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d015      	beq.n	80034ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fe f8af 	bl	80015f0 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fe f8ab 	bl	80015f0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0b1      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ac:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ee      	beq.n	8003496 <HAL_RCC_OscConfig+0x37e>
 80034b8:	e014      	b.n	80034e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe f899 	bl	80015f0 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe f895 	bl	80015f0 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e09b      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d8:	4b40      	ldr	r3, [pc, #256]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ee      	bne.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4a3b      	ldr	r2, [pc, #236]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8087 	beq.w	800360e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003500:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b08      	cmp	r3, #8
 800350a:	d061      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d146      	bne.n	80035a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <HAL_RCC_OscConfig+0x4cc>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351a:	f7fe f869 	bl	80015f0 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003522:	f7fe f865 	bl	80015f0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e06d      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d108      	bne.n	800355c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4921      	ldr	r1, [pc, #132]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a19      	ldr	r1, [r3, #32]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	430b      	orrs	r3, r1
 800356e:	491b      	ldr	r1, [pc, #108]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe f839 	bl	80015f0 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe f835 	bl	80015f0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e03d      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x46a>
 80035a0:	e035      	b.n	800360e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe f822 	bl	80015f0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe f81e 	bl	80015f0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e026      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x498>
 80035ce:	e01e      	b.n	800360e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e019      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40007000 	.word	0x40007000
 80035e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x500>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0d0      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d910      	bls.n	8003660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4965      	ldr	r1, [pc, #404]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a58      	ldr	r2, [pc, #352]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800369a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d040      	beq.n	800373c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d115      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e073      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06b      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4936      	ldr	r1, [pc, #216]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370c:	f7fd ff70 	bl	80015f0 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fd ff6c 	bl	80015f0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e053      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 020c 	and.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	429a      	cmp	r2, r3
 800373a:	d1eb      	bne.n	8003714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d210      	bcs.n	800376c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	4922      	ldr	r1, [pc, #136]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f821 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1cc>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1d0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fece 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40022000 	.word	0x40022000
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08004600 	.word	0x08004600
 80037e8:	2000000c 	.word	0x2000000c
 80037ec:	20000010 	.word	0x20000010

080037f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCC_GetSysClockFreq+0x94>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d002      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x30>
 800381a:	2b08      	cmp	r3, #8
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x36>
 800381e:	e027      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_RCC_GetSysClockFreq+0x98>)
 8003822:	613b      	str	r3, [r7, #16]
      break;
 8003824:	e027      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	0c9b      	lsrs	r3, r3, #18
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003830:	5cd3      	ldrb	r3, [r2, r3]
 8003832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_RCC_GetSysClockFreq+0x94>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	0c5b      	lsrs	r3, r3, #17
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	4a11      	ldr	r2, [pc, #68]	; (8003890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <HAL_RCC_GetSysClockFreq+0x98>)
 8003852:	fb03 f202 	mul.w	r2, r3, r2
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e004      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	613b      	str	r3, [r7, #16]
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetSysClockFreq+0x98>)
 8003872:	613b      	str	r3, [r7, #16]
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	693b      	ldr	r3, [r7, #16]
}
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	007a1200 	.word	0x007a1200
 800388c:	08004618 	.word	0x08004618
 8003890:	08004628 	.word	0x08004628
 8003894:	003d0900 	.word	0x003d0900

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	2000000c 	.word	0x2000000c

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff2 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08004610 	.word	0x08004610

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffde 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	0adb      	lsrs	r3, r3, #11
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	08004610 	.word	0x08004610

080038fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <RCC_Delay+0x34>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <RCC_Delay+0x38>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0a5b      	lsrs	r3, r3, #9
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003918:	bf00      	nop
  }
  while (Delay --);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e5a      	subs	r2, r3, #1
 800391e:	60fa      	str	r2, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f9      	bne.n	8003918 <RCC_Delay+0x1c>
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	2000000c 	.word	0x2000000c
 8003934:	10624dd3 	.word	0x10624dd3

08003938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e042      	b.n	80039d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fd38 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fcd5 	bl	800432c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d112      	bne.n	8003a18 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Receive_IT+0x26>
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00b      	b.n	8003a1a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fab7 	bl	8003f82 <UART_Start_Receive_IT>
 8003a14:	4603      	mov	r3, r0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b0ba      	sub	sp, #232	; 0xe8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_UART_IRQHandler+0x66>
 8003a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fb93 	bl	80041ae <UART_Receive_IT>
      return;
 8003a88:	e25b      	b.n	8003f42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80de 	beq.w	8003c50 <HAL_UART_IRQHandler+0x22c>
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80d1 	beq.w	8003c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xae>
 8003aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_UART_IRQHandler+0xd2>
 8003ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f043 0202 	orr.w	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_UART_IRQHandler+0xf6>
 8003b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <HAL_UART_IRQHandler+0x126>
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f043 0208 	orr.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 81f2 	beq.w	8003f38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_UART_IRQHandler+0x14e>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb1e 	bl	80041ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <HAL_UART_IRQHandler+0x17a>
 8003b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04f      	beq.n	8003c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa28 	bl	8003ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d041      	beq.n	8003c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1d9      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	; (8003e04 <HAL_UART_IRQHandler+0x3e0>)
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fe62 	bl	80018dc <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00e      	b.n	8003c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f993 	bl	8003f5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00a      	b.n	8003c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f98f 	bl	8003f5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e006      	b.n	8003c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f98b 	bl	8003f5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c4a:	e175      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	bf00      	nop
    return;
 8003c4e:	e173      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f040 814f 	bne.w	8003ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8148 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8141 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80b6 	beq.w	8003e08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8145 	beq.w	8003f3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f080 813e 	bcs.w	8003f3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f000 8088 	beq.w	8003de4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1d9      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e1      	bne.n	8003d20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e3      	bne.n	8003d5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db4:	f023 0310 	bic.w	r3, r3, #16
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e3      	bne.n	8003da2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fd41 	bl	8001866 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8b6 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e00:	e09c      	b.n	8003f3c <HAL_UART_IRQHandler+0x518>
 8003e02:	bf00      	nop
 8003e04:	080040b9 	.word	0x080040b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 808e 	beq.w	8003f40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8089 	beq.w	8003f40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e52:	647a      	str	r2, [r7, #68]	; 0x44
 8003e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	623b      	str	r3, [r7, #32]
   return(result);
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e3      	bne.n	8003e66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0310 	bic.w	r3, r3, #16
 8003ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ed0:	61fa      	str	r2, [r7, #28]
 8003ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e3      	bne.n	8003eac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f83b 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ef6:	e023      	b.n	8003f40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d009      	beq.n	8003f18 <HAL_UART_IRQHandler+0x4f4>
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f8e5 	bl	80040e0 <UART_Transmit_IT>
    return;
 8003f16:	e014      	b.n	8003f42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00e      	beq.n	8003f42 <HAL_UART_IRQHandler+0x51e>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f924 	bl	800417e <UART_EndTransmit_IT>
    return;
 8003f36:	e004      	b.n	8003f42 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f40:	bf00      	nop
  }
}
 8003f42:	37e8      	adds	r7, #232	; 0xe8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b095      	sub	sp, #84	; 0x54
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401c:	643a      	str	r2, [r7, #64]	; 0x40
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e5      	bne.n	8003ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	2b01      	cmp	r3, #1
 800406a:	d119      	bne.n	80040a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60bb      	str	r3, [r7, #8]
   return(result);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 0310 	bic.w	r3, r3, #16
 8004082:	647b      	str	r3, [r7, #68]	; 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408c:	61ba      	str	r2, [r7, #24]
 800408e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	613b      	str	r3, [r7, #16]
   return(result);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e5      	bne.n	800406c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ae:	bf00      	nop
 80040b0:	3754      	adds	r7, #84	; 0x54
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff ff41 	bl	8003f5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d13e      	bne.n	8004172 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d114      	bne.n	8004128 <UART_Transmit_IT+0x48>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d110      	bne.n	8004128 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]
 8004126:	e008      	b.n	800413a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1c59      	adds	r1, r3, #1
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6211      	str	r1, [r2, #32]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4619      	mov	r1, r3
 8004148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004194:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fed2 	bl	8003f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08c      	sub	sp, #48	; 0x30
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b22      	cmp	r3, #34	; 0x22
 80041c0:	f040 80ae 	bne.w	8004320 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d117      	bne.n	80041fe <UART_Receive_IT+0x50>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d113      	bne.n	80041fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
 80041fc:	e026      	b.n	800424c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004210:	d007      	beq.n	8004222 <UART_Receive_IT+0x74>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <UART_Receive_IT+0x82>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e008      	b.n	8004242 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423c:	b2da      	uxtb	r2, r3
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4619      	mov	r1, r3
 800425a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800425c:	2b00      	cmp	r3, #0
 800425e:	d15d      	bne.n	800431c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0220 	bic.w	r2, r2, #32
 800426e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d135      	bne.n	8004312 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	613b      	str	r3, [r7, #16]
   return(result);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	623a      	str	r2, [r7, #32]
 80042ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	69f9      	ldr	r1, [r7, #28]
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d10a      	bne.n	8004304 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fe2e 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
 8004310:	e002      	b.n	8004318 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc ff5c 	bl	80011d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e002      	b.n	8004322 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3730      	adds	r7, #48	; 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004366:	f023 030c 	bic.w	r3, r3, #12
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	430b      	orrs	r3, r1
 8004372:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <UART_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7ff fa9e 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	e002      	b.n	80043a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7ff fa86 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80043a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	4a22      	ldr	r2, [pc, #136]	; (8004444 <UART_SetConfig+0x118>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	0119      	lsls	r1, r3, #4
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <UART_SetConfig+0x118>)
 80043da:	fba3 0302 	umull	r0, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2064      	movs	r0, #100	; 0x64
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	; 0x32
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <UART_SetConfig+0x118>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f8:	4419      	add	r1, r3
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <UART_SetConfig+0x118>)
 8004412:	fba3 0302 	umull	r0, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2064      	movs	r0, #100	; 0x64
 800441a:	fb00 f303 	mul.w	r3, r0, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	3332      	adds	r3, #50	; 0x32
 8004424:	4a07      	ldr	r2, [pc, #28]	; (8004444 <UART_SetConfig+0x118>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 020f 	and.w	r2, r3, #15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	440a      	add	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013800 	.word	0x40013800
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <memset>:
 8004448:	4603      	mov	r3, r0
 800444a:	4402      	add	r2, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	2600      	movs	r6, #0
 800445c:	4d0c      	ldr	r5, [pc, #48]	; (8004490 <__libc_init_array+0x38>)
 800445e:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 8004460:	1b64      	subs	r4, r4, r5
 8004462:	10a4      	asrs	r4, r4, #2
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	f000 f81a 	bl	80044a0 <_init>
 800446c:	2600      	movs	r6, #0
 800446e:	4d0a      	ldr	r5, [pc, #40]	; (8004498 <__libc_init_array+0x40>)
 8004470:	4c0a      	ldr	r4, [pc, #40]	; (800449c <__libc_init_array+0x44>)
 8004472:	1b64      	subs	r4, r4, r5
 8004474:	10a4      	asrs	r4, r4, #2
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	0800462c 	.word	0x0800462c
 8004494:	0800462c 	.word	0x0800462c
 8004498:	0800462c 	.word	0x0800462c
 800449c:	08004630 	.word	0x08004630

080044a0 <_init>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr

080044ac <_fini>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr
